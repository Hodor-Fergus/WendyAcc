{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "cmdevsynapse"
		},
		"cmdevsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'cmdevsynapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:cmdevsynapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"cmdevsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rawdevstorage.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Master_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Master Pipeline Which runs other pipeline",
				"activities": [
					{
						"name": "Execute Pyspark Pipeline",
						"description": "Execute Pyspark Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pyspark_STG_Load_To_Delta_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pandas Pipeline",
						"description": "Execute Pandas Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pyspark Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pandas_STG_Load_To_Delta_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait for 5 sec",
						"description": "Wait for 5 sec\nThis is a random activity",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute SparkSQL Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Execute SparkSQL Pipeline",
						"description": "Execute SparkSQL Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pandas Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SparkSQL_STG_Load_To_Delta_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Pyspark_STG_Load_To_Delta_Tables')]",
				"[concat(variables('workspaceId'), '/pipelines/Pandas_STG_Load_To_Delta_Tables')]",
				"[concat(variables('workspaceId'), '/pipelines/SparkSQL_STG_Load_To_Delta_Tables')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pandas_STG_Load_To_Delta_Tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pandas_STG_Load_To_Delta_Tables",
				"activities": [
					{
						"name": "Get Metadata of ADLS Data Source Container",
						"description": "Get Metadata of ADLS Data Source Container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_Container_rawdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach Container",
						"description": "ForEach Container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata of ADLS Data Source Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata of ADLS Data Source Container').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Load the data from the blob container",
									"description": "Load the data from the blob container",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": "Pandas_Load_Data_From_Blob_To_Synapse_SQL_Pool",
											"type": "NotebookReference"
										},
										"parameters": {
											"FolderName": {
												"value": {
													"value": "@item()['name']",
													"type": "Expression"
												},
												"type": "string"
											},
											"Mode": {
												"value": {
													"value": "@variables('Mode')",
													"type": "Expression"
												},
												"type": "string"
											}
										},
										"snapshot": true,
										"sparkPool": {
											"referenceName": "devpool",
											"type": "BigDataPoolReference"
										},
										"executorSize": "Small",
										"conf": {
											"spark.dynamicAllocation.enabled": false
										},
										"driverSize": "Small"
									}
								},
								{
									"name": "Set variable Mode",
									"description": "Set variable Mode",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Load the data from the blob container",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Mode",
										"value": "append"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Mode": {
						"type": "String",
						"defaultValue": "overwrite"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_Container_rawdata')]",
				"[concat(variables('workspaceId'), '/notebooks/Pandas_Load_Data_From_Blob_To_Synapse_SQL_Pool')]",
				"[concat(variables('workspaceId'), '/bigDataPools/devpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pyspark_STG_Load_To_Delta_Tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pandas_STG_Load_To_Delta_Tables",
				"activities": [
					{
						"name": "Get Metadata of ADLS Data Source Container",
						"description": "Get Metadata of ADLS Data Source Container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_Container_rawdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach Container",
						"description": "ForEach Container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata of ADLS Data Source Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata of ADLS Data Source Container').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Load the data from the blob container",
									"description": "Load the data from the blob container",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": "PySpark_Load_Data_From_Blob_To_Synapse_SQL_Pool",
											"type": "NotebookReference"
										},
										"parameters": {
											"FolderName": {
												"value": {
													"value": "@item()['name']",
													"type": "Expression"
												},
												"type": "string"
											},
											"Mode": {
												"value": {
													"value": "@variables('Mode')",
													"type": "Expression"
												},
												"type": "string"
											}
										},
										"snapshot": true,
										"sparkPool": {
											"referenceName": "devpool",
											"type": "BigDataPoolReference"
										},
										"executorSize": "Small",
										"conf": {
											"spark.dynamicAllocation.enabled": false
										},
										"driverSize": "Small"
									}
								},
								{
									"name": "Set variable Mode",
									"description": "Set variable Mode",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Load the data from the blob container",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Mode",
										"value": "append"
									}
								}
							]
						}
					},
					{
						"name": "Load Fact and Dimension Table",
						"description": "Load Fact and Dimension Table",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "ForEach Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "PySpark_Fact_Dimension_Creation",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "devpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Mode": {
						"type": "String",
						"defaultValue": "overwrite"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_Container_rawdata')]",
				"[concat(variables('workspaceId'), '/notebooks/PySpark_Fact_Dimension_Creation')]",
				"[concat(variables('workspaceId'), '/bigDataPools/devpool')]",
				"[concat(variables('workspaceId'), '/notebooks/PySpark_Load_Data_From_Blob_To_Synapse_SQL_Pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkSQL_STG_Load_To_Delta_Tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pandas_STG_Load_To_Delta_Tables",
				"activities": [
					{
						"name": "Get Metadata of ADLS Data Source Container",
						"description": "Get Metadata of ADLS Data Source Container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_Container_rawdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach Container",
						"description": "ForEach Container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata of ADLS Data Source Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata of ADLS Data Source Container').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Load the data from the blob container",
									"description": "Load the data from the blob container",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": "SparkSQL_Load_Data_From_Blob_To_Synapse_SQL_Pool",
											"type": "NotebookReference"
										},
										"parameters": {
											"FolderName": {
												"value": {
													"value": "@item()['name']",
													"type": "Expression"
												},
												"type": "string"
											},
											"Mode": {
												"value": {
													"value": "@variables('Mode')",
													"type": "Expression"
												},
												"type": "string"
											}
										},
										"snapshot": true,
										"sparkPool": {
											"referenceName": "devpool",
											"type": "BigDataPoolReference"
										},
										"executorSize": "Small",
										"conf": {
											"spark.dynamicAllocation.enabled": false
										},
										"driverSize": "Small"
									}
								},
								{
									"name": "Set variable Mode",
									"description": "Set variable Mode",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Load the data from the blob container",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Mode",
										"value": "append"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Mode": {
						"type": "String",
						"defaultValue": "overwrite"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ADLS_Container_rawdata')]",
				"[concat(variables('workspaceId'), '/notebooks/SparkSQL_Load_Data_From_Blob_To_Synapse_SQL_Pool')]",
				"[concat(variables('workspaceId'), '/bigDataPools/devpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS_Container_rawdata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "rawdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Electricity_Measurement_pandas_join')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Electricity_Measurement_pandas_join",
						"fileSystem": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Electricity_Measurement_pandas_union')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Electricity_Measurement_pandas_union",
						"fileSystem": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Electricity_Measurement_pyspark_join')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Electricity_Measurement_pyspark_join",
						"fileSystem": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Electricity_Measurement_pyspark_union')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Electricity_Measurement_pyspark_union",
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Electricity_Measurement_pyspark_union",
						"fileSystem": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Electricity_Measurement_sparksql_join')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Electricity_Measurement_sparksql_join",
						"fileSystem": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Electricity_Measurement_sparksql_union')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cmdevsynapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Electricity_Measurement_sparksql_union",
						"fileSystem": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cmdevsynapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmdevsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('cmdevsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmdevsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('cmdevsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DeltaLakeQuery')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Other Queries"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    Peildatum,MeasurementType, COUNT(*) as CT\nFROM\n    OPENROWSET(\n        BULK 'https://wendydlstorage.blob.core.windows.net/data/Silver/Combined/Electricity_Measurement_2/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n\nGROUP BY Peildatum,MeasurementType\n\n\n\nSELECT\n    DM_Peildatum,DM_MeasurementType, COUNT(*) as CT\nFROM\n    OPENROWSET(\n        BULK 'https://wendydlstorage.blob.core.windows.net/data/Silver/Combined/Electricity_Measurement_join/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n\nGROUP BY DM_Peildatum,DM_MeasurementType",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL _Load_Data_From_Blob_Join')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Main Queries"
				},
				"content": {
					"query": "-- Check the available database names\n--SELECT name, database_id, create_date  \n--FROM sys.databases;  \n--GO\n\n-- Change the databse collesion\n--alter database [default]\n--COLLATE Latin1_General_100_BIN2_UTF8;\n\n-- Main queries Inside CTE's to read data from CSV files from the ADLS\n;with cte_AMR_08 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_08/P6523_Verbruiken_AMR_GEMEENTE_202208.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_08 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_08/P6523_Verbruiken_DM_GEMEENTE_202208.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_AMR_09 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_09/P6523_Verbruiken_AMR_GEMEENTE_202209.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_09 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_09/P6523_Verbruiken_DM_GEMEENTE_202209.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_AMR_10 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_10/P6523_Verbruiken_AMR_GEMEENTE_202210.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_10 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_10/P6523_Verbruiken_DM_GEMEENTE_202210.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_AMR_11 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_11/P6523_Verbruiken_AMR_GEMEENTE_202211.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_11 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_11/P6523_Verbruiken_DM_GEMEENTE_202211.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,CTE_UNION_AMR as (\n    SELECT * FROM cte_AMR_08 UNION\n    SELECT * FROM cte_AMR_09 UNION\n    SELECT * FROM cte_AMR_10 UNION\n    SELECT * FROM cte_AMR_11 \n)\n,CTE_UNION_DM as (\n    SELECT * FROM cte_DM_08 UNION\n    SELECT * FROM cte_DM_09 UNION\n    SELECT * FROM cte_DM_10 UNION\n    SELECT * FROM cte_DM_11\n)\n,CTE_JOIN as (\n    SELECT \n    A.Trekkingsdatum                        as AMR_Trekkingsdatum\n    ,A.Peildatum                            as AMR_Peildatum\n    ,A.Markt                                as AMR_Markt\n    ,A.Leveringsadres_Postcode              as AMR_Leveringsadres_Postcode\n    ,A.Leveringsadres_Gemeente              as AMR_Leveringsadres_Gemeente\n    ,A.WerkelijkVerbruik_RM_2017            as AMR_WerkelijkVerbruik_RM_2017\n    ,A.BenaderendVerbruik_VM_2017           as AMR_BenaderendVerbruik_VM_2017\n    ,A.BenaderendVerbruik_VM_2017_Norm      as AMR_BenaderendVerbruik_VM_2017_Norm\n    ,A.AantalToegangspunten_2017            as AMR_AantalToegangspunten_2017\n    ,A.WerkelijkVerbruik_RM_2018            as AMR_WerkelijkVerbruik_RM_2018\n    ,A.BenaderendVerbruik_VM_2018           as AMR_BenaderendVerbruik_VM_2018\n    ,A.BenaderendVerbruik_VM_2018_Norm      as AMR_BenaderendVerbruik_VM_2018_Norm\n    ,A.AantalToegangspunten_2018            as AMR_AantalToegangspunten_2018\n    ,A.WerkelijkVerbruik_RM_2019            as AMR_WerkelijkVerbruik_RM_2019\n    ,A.BenaderendVerbruik_VM_2019           as AMR_BenaderendVerbruik_VM_2019\n    ,A.BenaderendVerbruik_VM_2019_Norm      as AMR_BenaderendVerbruik_VM_2019_Norm\n    ,A.AantalToegangspunten_2019            as AMR_AantalToegangspunten_2019\n    ,A.WerkelijkVerbruik_RM_2020            as AMR_WerkelijkVerbruik_RM_2020\n    ,A.BenaderendVerbruik_VM_2020           as AMR_BenaderendVerbruik_VM_2020\n    ,A.BenaderendVerbruik_VM_2020_Norm      as AMR_BenaderendVerbruik_VM_2020_Norm\n    ,A.AantalToegangspunten_2020            as AMR_AantalToegangspunten_2020\n    ,A.WerkelijkVerbruik_RM_2021            as AMR_WerkelijkVerbruik_RM_2021\n    ,A.BenaderendVerbruik_VM_2021           as AMR_BenaderendVerbruik_VM_2021\n    ,A.BenaderendVerbruik_VM_2021_Norm      as AMR_BenaderendVerbruik_VM_2021_Norm\n    ,A.AantalToegangspunten_2021            as AMR_AantalToegangspunten_2021\n    ,A.Gemiddeld_WerkelijkVerbruik          as AMR_Gemiddeld_WerkelijkVerbruik\n    ,A.Gemiddeld_BenaderendVerbruik         as AMR_Gemiddeld_BenaderendVerbruik\n    ,A.Gemiddeld_BenaderendVerbruik_Norm    as AMR_Gemiddeld_BenaderendVerbruik_Norm\n    ,A.Total_AantalToegangspunten           as AMR_Total_AantalToegangspunten\n    ,A.MeasurementType                      as AMR_MeasurementType\n    ,B.Trekkingsdatum                       as DM_Trekkingsdatum\n    ,B.Peildatum                            as DM_Peildatum\n    ,B.Markt                                as DM_Markt\n    ,B.Leveringsadres_Postcode              as DM_Leveringsadres_Postcode\n    ,B.Leveringsadres_Gemeente              as DM_Leveringsadres_Gemeente\n    ,B.WerkelijkVerbruik_RM_2017            as DM_WerkelijkVerbruik_RM_2017\n    ,B.BenaderendVerbruik_VM_2017           as DM_BenaderendVerbruik_VM_2017\n    ,B.BenaderendVerbruik_VM_2017_Norm      as DM_BenaderendVerbruik_VM_2017_Norm\n    ,B.AantalToegangspunten_2017            as DM_AantalToegangspunten_2017\n    ,B.WerkelijkVerbruik_RM_2018            as DM_WerkelijkVerbruik_RM_2018\n    ,B.BenaderendVerbruik_VM_2018           as DM_BenaderendVerbruik_VM_2018\n    ,B.BenaderendVerbruik_VM_2018_Norm      as DM_BenaderendVerbruik_VM_2018_Norm\n    ,B.AantalToegangspunten_2018            as DM_AantalToegangspunten_2018\n    ,B.WerkelijkVerbruik_RM_2019            as DM_WerkelijkVerbruik_RM_2019\n    ,B.BenaderendVerbruik_VM_2019           as DM_BenaderendVerbruik_VM_2019\n    ,B.BenaderendVerbruik_VM_2019_Norm      as DM_BenaderendVerbruik_VM_2019_Norm\n    ,B.AantalToegangspunten_2019            as DM_AantalToegangspunten_2019\n    ,B.WerkelijkVerbruik_RM_2020            as DM_WerkelijkVerbruik_RM_2020\n    ,B.BenaderendVerbruik_VM_2020           as DM_BenaderendVerbruik_VM_2020\n    ,B.BenaderendVerbruik_VM_2020_Norm      as DM_BenaderendVerbruik_VM_2020_Norm\n    ,B.AantalToegangspunten_2020            as DM_AantalToegangspunten_2020\n    ,B.WerkelijkVerbruik_RM_2021            as DM_WerkelijkVerbruik_RM_2021\n    ,B.BenaderendVerbruik_VM_2021           as DM_BenaderendVerbruik_VM_2021\n    ,B.BenaderendVerbruik_VM_2021_Norm      as DM_BenaderendVerbruik_VM_2021_Norm\n    ,B.AantalToegangspunten_2021            as DM_AantalToegangspunten_2021\n    ,B.Gemiddeld_WerkelijkVerbruik          as DM_Gemiddeld_WerkelijkVerbruik\n    ,B.Gemiddeld_BenaderendVerbruik         as DM_Gemiddeld_BenaderendVerbruik\n    ,B.Gemiddeld_BenaderendVerbruik_Norm    as DM_Gemiddeld_BenaderendVerbruik_Norm\n    ,B.Total_AantalToegangspunten           as DM_Total_AantalToegangspunten\n    ,B.MeasurementType                      as DM_MeasurementType\n    FROM CTE_UNION_AMR A\n    FULL OUTER JOIN CTE_UNION_DM B ON A.Markt=B.Markt \n    AND A.Leveringsadres_Postcode=B.Leveringsadres_Postcode\n    AND A.Leveringsadres_Gemeente=B.Leveringsadres_Gemeente\n    AND A.Peildatum=B.Peildatum\n)\n\nSelect * \nFROM CTE_JOIN;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL _Load_Data_From_Blob_Union')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Main Queries"
				},
				"content": {
					"query": "-- Check the available database names\n--SELECT name, database_id, create_date  \n--FROM sys.databases;  \n--GO\n\n-- Change the databse collesion\n--alter database [default]\n--COLLATE Latin1_General_100_BIN2_UTF8;\n\n-- Main queries Inside CTE's to read data from CSV files from the ADLS\n;with cte_AMR_08 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_08/P6523_Verbruiken_AMR_GEMEENTE_202208.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_08 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_08/P6523_Verbruiken_DM_GEMEENTE_202208.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_AMR_09 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_09/P6523_Verbruiken_AMR_GEMEENTE_202209.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_09 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_09/P6523_Verbruiken_DM_GEMEENTE_202209.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_AMR_10 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_10/P6523_Verbruiken_AMR_GEMEENTE_202210.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_10 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_10/P6523_Verbruiken_DM_GEMEENTE_202210.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_AMR_11 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    --,Sector,Graaddagen_RM,Graaddagen_VM_2017--,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018--,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019\n    --,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020--,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021--,Perc_Delta_VM_2021vsRM\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Analogue' as MeasurementType\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_11/P6523_Verbruiken_AMR_GEMEENTE_202211.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,cte_DM_11 as (\nSELECT DISTINCT\n    Trekkingsdatum\n    ,CAST(Peildatum as DATE) as Peildatum\n    ,Markt\n    --,LP_Aanwezig,UNT_Aanwezig,SociaalTarief_Aanwezig,KlantFluvius,Graaddagen_RM,Graaddagen_VM_2017,Perc_Delta_VM_2017vsRM,Graaddagen_VM_2018,Perc_Delta_VM_2018vsRM,Graaddagen_VM_2019,Perc_Delta_VM_2019vsRM,Graaddagen_VM_2020,Perc_Delta_VM_2020vsRM,Graaddagen_VM_2021,Perc_Delta_VM_2021vsRM\n    ,CAST(Leveringsadres_Postcode as INT) as Leveringsadres_Postcode\n    ,Leveringsadres_Gemeente\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\n    ,CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\n    ,CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021   \n    ,(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\n    ,(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\n    ,CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\n    ,'Digital' as MeasurementType\n\nFROM\n    OPENROWSET(\n        BULK 'https://rawdevstorage.dfs.core.windows.net/rawdata/2022_11/P6523_Verbruiken_DM_GEMEENTE_202211.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        DELIMITER = ';',\n        HEADER_ROW = TRUE\n    ) AS [result]\n)\n,CTE_UNION_AMR as (\n    SELECT * FROM cte_AMR_08 UNION\n    SELECT * FROM cte_AMR_09 UNION\n    SELECT * FROM cte_AMR_10 UNION\n    SELECT * FROM cte_AMR_11\n)\n,CTE_UNION_DM as (\n    SELECT * FROM cte_DM_08 UNION\n    SELECT * FROM cte_DM_09 UNION\n    SELECT * FROM cte_DM_10 UNION\n    SELECT * FROM cte_DM_11\n)\n,CTE_UNION_ALL as (\n    SELECT * FROM CTE_UNION_AMR UNION\n    SELECT * FROM CTE_UNION_DM\n)\n\nSelect * \nFROM CTE_UNION_ALL;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pandas_Final')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "devpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a2ce0d27-80b0-4f57-99a4-1f2cbb5c8428"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/devpool",
						"name": "devpool",
						"type": "Spark",
						"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/devpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Pandas ETL"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Parameters and Libraries"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Parameter used to change read folder and mode dynamically in pipeline"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"#Get Month/Year Folder From Bronze and use to get the value in the pipeline (Toggled as a parameter)\r\n",
							"FolderName = \"2022_08\"\r\n",
							"Mode = \"overwrite\"\r\n",
							"#For the first time it overwrites and for subsequent notebooks, it apppends which is adjusted via the pipeline"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Generate Month Year Folder "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Using FolderName to create new variable to read file (automatically in pipeline)\r\n",
							"FolderName_SeperatorRemoved = FolderName.replace (\"_\", \"\")\r\n",
							"year = FolderName.split('_')[0]\r\n",
							"month = FolderName.split('_')[1]"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Import Libraries"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import lit,col\r\n",
							"import re\r\n",
							"import pandas as pd\r\n",
							"import warnings\r\n",
							"warnings.filterwarnings('ignore') ##This will ignore all Filter warnings in your code."
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Create Connections"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Spark Session"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#Spark Session\r\n",
							"# storage_acc_name = \"dlscloubisintern\"\r\n",
							"# storage_container = \"rawdatafile\"\r\n",
							"# sc = SparkSession.builder.getOrCreate()\r\n",
							"# token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"# storage_sas_token = token_library.getConnectionString(\"syn-intern-westeu-1-WorkspaceDefaultStorage\")\r\n",
							"# spark.conf.set('fs.azure.sas.{}.{}.blob.core.windows.net' .format(storage_container, storage_acc_name),storage_sas_token)\r\n",
							"\r\n",
							"blob_account_name = \"rawdevstorage\"\r\n",
							"blob_container_name = \"rawdata\"\r\n",
							"sc = SparkSession.builder.getOrCreate()\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dynamic Delimiter"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex\r\n",
							"\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## ANALOGUE ETL"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Read and Load AMR Data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Read Analogue File\r\n",
							"\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/{}/P6523_Verbruiken_AMR_GEMEENTE_{}.csv' .format(FolderName, FolderName_SeperatorRemoved)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))\r\n",
							"print(amr_delimiter_type)\r\n",
							"\r\n",
							"AMRData = spark.read.load(amr_Filename,format='csv',inferschema=True,header=True,delimiter=amr_delimiter_type) \r\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Convert Dataset to Pandas"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Convert To Pandas\r\n",
							"\r\n",
							"AMRData = AMRData.toPandas()\r\n",
							"#AMRData = AMRData.select(\"*\").toPandas()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Transform AMR Data\r\n",
							"Due to inconsistent data formats and extra columns for 2023, if files are > than the year 2022 we modify our code to suit the year \r\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Select Required Columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    select_amr = AMRData[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017', 'AantalToegangspunten_2017'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018', 'AantalToegangspunten_2018'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'AantalToegangspunten_2019'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'AantalToegangspunten_2020'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'AantalToegangspunten_2021']]\r\n",
							"else:\r\n",
							"    select_amr = AMRData[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017', 'AantalToegangspunten_2017'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018', 'AantalToegangspunten_2018'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'AantalToegangspunten_2019'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'AantalToegangspunten_2020'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'AantalToegangspunten_2021'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2022', 'BenaderendVerbruik_VM_2022', 'AantalToegangspunten_2022']]"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Fix Date Error\r\n",
							"dd/mmm/yy and dd/mmm/yyyy are default date formats handled by pyspark and pandas. The datasets have 4 different date formats. Since Pandas handles 2 by default, you have to specify the other formats and convert to default format"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Convert datetime\r\n",
							"#d = day, m = month, y = year, b = month name\r\n",
							"\r\n",
							"try:\r\n",
							"    select_amr['Peildatum'] = pd.to_datetime(select_amr['Peildatum'], format= '%d/%b/%y')\r\n",
							"except:\r\n",
							"    try:\r\n",
							"        select_amr['Peildatum'] = pd.to_datetime(select_amr['Peildatum'], format='%m/%d/%y')\r\n",
							"    except:\r\n",
							"        try:\r\n",
							"            select_amr['Peildatum'] = pd.to_datetime(select_amr['Peildatum'], format='%d/%b/%Y')\r\n",
							"        except:\r\n",
							"            select_amr['Peildatum'] = pd.to_datetime(select_amr['Peildatum'], format='%d-%b-%y')\r\n",
							"        \r\n",
							"\r\n",
							"#Convert to desired format\r\n",
							"select_amr['Peildatum'] = select_amr['Peildatum'].dt.strftime('%d-%m-%Y')"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Convert Numerical columns from string to float for years < 2023"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Due to inconsistent data formats, if files are < than the year 2023, \r\n",
							"#We replace the , to . in the numerical columns and convert the numerical columns from string to float \r\n",
							"#but if > 2023 we leave it as it is (corrected format)\r\n",
							"\r\n",
							"if int(year) < 2023:\r\n",
							"    select_amr[\"WerkelijkVerbruik_RM_2017\"] = select_amr [\"WerkelijkVerbruik_RM_2017\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"WerkelijkVerbruik_RM_2018\"] = select_amr [\"WerkelijkVerbruik_RM_2018\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"WerkelijkVerbruik_RM_2019\"] = select_amr [\"WerkelijkVerbruik_RM_2019\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"WerkelijkVerbruik_RM_2020\"] = select_amr [\"WerkelijkVerbruik_RM_2020\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"WerkelijkVerbruik_RM_2021\"] = select_amr [\"WerkelijkVerbruik_RM_2021\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"BenaderendVerbruik_VM_2017\"] = select_amr [\"BenaderendVerbruik_VM_2017\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"BenaderendVerbruik_VM_2018\"] = select_amr [\"BenaderendVerbruik_VM_2018\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"BenaderendVerbruik_VM_2019\"] = select_amr [\"BenaderendVerbruik_VM_2019\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"BenaderendVerbruik_VM_2020\"] = select_amr [\"BenaderendVerbruik_VM_2020\"].str.replace(',','.').astype(float)\r\n",
							"    select_amr[\"BenaderendVerbruik_VM_2021\"] = select_amr [\"BenaderendVerbruik_VM_2021\"].str.replace(',','.').astype(float)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Group AMR Data for Granularity"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#as_index = True means the grouping columns should be used as index in the resulting dataframe\r\n",
							"#reset_index() = the current index becomes the new index in the dataframe\r\n",
							"if int(year) < 2023 :\r\n",
							"    group_amr = select_amr.groupby(['Trekkingsdatum','Peildatum','Markt','Leveringsadres_Postcode','Leveringsadres_Gemeente'], as_index=True).agg(\\\r\n",
							"    {'AantalToegangspunten_2017': 'sum','WerkelijkVerbruik_RM_2017': 'sum','BenaderendVerbruik_VM_2017': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2018': 'sum','WerkelijkVerbruik_RM_2018': 'sum','BenaderendVerbruik_VM_2018': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2019': 'sum','WerkelijkVerbruik_RM_2019': 'sum','BenaderendVerbruik_VM_2019': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2020': 'sum','WerkelijkVerbruik_RM_2020': 'sum','BenaderendVerbruik_VM_2020': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2021': 'sum','WerkelijkVerbruik_RM_2021': 'sum','BenaderendVerbruik_VM_2021': 'sum'}).reset_index()\r\n",
							"else:\r\n",
							"    group_amr = select_amr.groupby(['Trekkingsdatum','Peildatum','Markt','Leveringsadres_Postcode','Leveringsadres_Gemeente'], as_index=True).agg(\\\r\n",
							"    {'AantalToegangspunten_2017': 'sum','WerkelijkVerbruik_RM_2017': 'sum','BenaderendVerbruik_VM_2017': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2018': 'sum','WerkelijkVerbruik_RM_2018': 'sum','BenaderendVerbruik_VM_2018': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2019': 'sum','WerkelijkVerbruik_RM_2019': 'sum','BenaderendVerbruik_VM_2019': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2020': 'sum','WerkelijkVerbruik_RM_2020': 'sum','BenaderendVerbruik_VM_2020': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2021': 'sum','WerkelijkVerbruik_RM_2021': 'sum','BenaderendVerbruik_VM_2021': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2022': 'sum','WerkelijkVerbruik_RM_2022': 'sum','BenaderendVerbruik_VM_2022': 'sum'}).reset_index()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Rename Columns and Select Required Columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"#rename columns\r\n",
							" #inplace true overrides existing dataframe\r\n",
							"\r\n",
							"if int(year) < 2023:\r\n",
							"    select_amr = group_amr.rename({'Trekkingsdatum':'amr_Trekkingsdatum', 'Peildatum':'amr_Peildatum', 'Markt':'amr_Markt', 'Leveringsadres_Postcode':'amr_Leveringsadres_Postcode'\r\n",
							"    , 'Leveringsadres_Gemeente':'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017':'amr_WerkelijkVerbruik_2017', 'BenaderendVerbruik_VM_2017':'amr_BenaderendVerbruik_2017', 'AantalToegangspunten_2017':'amr_AantalToegangspunten_2017'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018':'amr_WerkelijkVerbruik_2018', 'BenaderendVerbruik_VM_2018':'amr_BenaderendVerbruik_2018', 'AantalToegangspunten_2018':'amr_AantalToegangspunten_2018'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019':'amr_WerkelijkVerbruik_2019', 'BenaderendVerbruik_VM_2019':'amr_BenaderendVerbruik_2019', 'AantalToegangspunten_2019':'amr_AantalToegangspunten_2019'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020':'amr_WerkelijkVerbruik_2020', 'BenaderendVerbruik_VM_2020':'amr_BenaderendVerbruik_2020', 'AantalToegangspunten_2020':'amr_AantalToegangspunten_2020'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021':'amr_WerkelijkVerbruik_2021', 'BenaderendVerbruik_VM_2021':'amr_BenaderendVerbruik_2021', 'AantalToegangspunten_2021':'amr_AantalToegangspunten_2021'}\\\r\n",
							"    , axis='columns')\r\n",
							"    #Create Norms\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2017_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2017\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2018_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2018\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2019_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2019\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2020_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2020\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2021_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2021\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2017_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2017\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2018_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2018\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2019_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2019\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2020_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2020\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2021_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2021\"]\r\n",
							"    #rearrange\r\n",
							"    clean_amr = select_amr[['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm']]\r\n",
							"else:\r\n",
							"    select_amr = group_amr.rename({'Trekkingsdatum':'amr_Trekkingsdatum', 'Peildatum':'amr_Peildatum', 'Markt':'amr_Markt', 'Leveringsadres_Postcode':'amr_Leveringsadres_Postcode'\r\n",
							"    , 'Leveringsadres_Gemeente':'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017':'amr_WerkelijkVerbruik_2017', 'BenaderendVerbruik_VM_2017':'amr_BenaderendVerbruik_2017', 'AantalToegangspunten_2017':'amr_AantalToegangspunten_2017'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018':'amr_WerkelijkVerbruik_2018', 'BenaderendVerbruik_VM_2018':'amr_BenaderendVerbruik_2018', 'AantalToegangspunten_2018':'amr_AantalToegangspunten_2018'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019':'amr_WerkelijkVerbruik_2019', 'BenaderendVerbruik_VM_2019':'amr_BenaderendVerbruik_2019', 'AantalToegangspunten_2019':'amr_AantalToegangspunten_2019'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020':'amr_WerkelijkVerbruik_2020', 'BenaderendVerbruik_VM_2020':'amr_BenaderendVerbruik_2020', 'AantalToegangspunten_2020':'amr_AantalToegangspunten_2020'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021':'amr_WerkelijkVerbruik_2021', 'BenaderendVerbruik_VM_2021':'amr_BenaderendVerbruik_2021', 'AantalToegangspunten_2021':'amr_AantalToegangspunten_2021'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2022':'amr_WerkelijkVerbruik_2022', 'BenaderendVerbruik_VM_2022':'amr_BenaderendVerbruik_2022', 'AantalToegangspunten_2022':'amr_AantalToegangspunten_2022'}\\\r\n",
							"    , axis='columns')\r\n",
							"    #Create Norms\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2017_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2017\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2018_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2018\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2019_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2019\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2020_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2020\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2021_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2021\"]\r\n",
							"    select_amr[\"amr_WerkelijkVerbruik_2022_Norm\"] = select_amr [\"amr_WerkelijkVerbruik_2022\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2017_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2017\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2018_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2018\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2019_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2019\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2020_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2020\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2021_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2021\"]\r\n",
							"    select_amr[\"amr_BenaderendVerbruik_2022_Norm\"] = select_amr [\"amr_BenaderendVerbruik_2022\"]\r\n",
							"    #rearrange\r\n",
							"    clean_amr = select_amr[['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2022', 'amr_WerkelijkVerbruik_2022', 'amr_WerkelijkVerbruik_2022_Norm', 'amr_BenaderendVerbruik_2022', 'amr_BenaderendVerbruik_2022_Norm']]\r\n",
							""
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(clean_amr)"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Aggregate AMR Values and rearrange data\r\n",
							"**Pandas doesn't recognize decimal values as a comma (EU format ,) but as a point (US format .) thus we have to replace the value.**\\\r\n",
							"df[\"column name 1\"] = df [\"column name 1\"].str.replace(',','.')"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    clean_amr['amr_Gemiddeld_WerkelijkVerbruik'] = ((clean_amr['amr_WerkelijkVerbruik_2017'] + clean_amr['amr_WerkelijkVerbruik_2018']\\\r\n",
							"    + clean_amr['amr_WerkelijkVerbruik_2019'] + clean_amr['amr_WerkelijkVerbruik_2020']+ clean_amr['amr_WerkelijkVerbruik_2021'])/5)\r\n",
							"\r\n",
							"    clean_amr['amr_Gemiddeld_WerkelijkVerbruik_Norm'] = ((clean_amr['amr_WerkelijkVerbruik_2017_Norm'] + clean_amr['amr_WerkelijkVerbruik_2018_Norm']\\\r\n",
							"    + clean_amr['amr_WerkelijkVerbruik_2019_Norm'] + clean_amr['amr_WerkelijkVerbruik_2020_Norm'] + clean_amr['amr_WerkelijkVerbruik_2021_Norm'])/5)\r\n",
							"\r\n",
							"    clean_amr['amr_Gemiddeld_BenaderendVerbruik'] = ((clean_amr['amr_BenaderendVerbruik_2017'] + clean_amr['amr_BenaderendVerbruik_2018']\\\r\n",
							"    + clean_amr['amr_BenaderendVerbruik_2019'] + clean_amr['amr_BenaderendVerbruik_2020'] + clean_amr['amr_BenaderendVerbruik_2021'])/5)\r\n",
							"\r\n",
							"    clean_amr['amr_Gemiddeld_BenaderendVerbruik_Norm'] = ((clean_amr['amr_BenaderendVerbruik_2017_Norm'] + clean_amr['amr_BenaderendVerbruik_2018_Norm']\\\r\n",
							"    + clean_amr['amr_BenaderendVerbruik_2019_Norm'] + clean_amr['amr_BenaderendVerbruik_2020_Norm'] + clean_amr['amr_BenaderendVerbruik_2021_Norm'])/5)\r\n",
							"\r\n",
							"    clean_amr['amr_Total_AantalToegangspunten'] = ((clean_amr['amr_AantalToegangspunten_2017'] + clean_amr['amr_AantalToegangspunten_2018']\\\r\n",
							"    + clean_amr['amr_AantalToegangspunten_2019'] + clean_amr['amr_AantalToegangspunten_2020'] + clean_amr['amr_AantalToegangspunten_2021'])/5)\r\n",
							"\r\n",
							"    agg_clean_amr = clean_amr[['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik'\\\r\n",
							"    , 'amr_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"\r\n",
							"else:\r\n",
							"    clean_amr['amr_Gemiddeld_WerkelijkVerbruik'] = ((clean_amr['amr_WerkelijkVerbruik_2017'] + clean_amr['amr_WerkelijkVerbruik_2018']\\\r\n",
							"    + clean_amr['amr_WerkelijkVerbruik_2019'] + clean_amr['amr_WerkelijkVerbruik_2020']+ clean_amr['amr_WerkelijkVerbruik_2021']\\\r\n",
							"    + clean_amr['amr_WerkelijkVerbruik_2022'])/6)\r\n",
							"\r\n",
							"    clean_amr['amr_Gemiddeld_WerkelijkVerbruik_Norm'] = ((clean_amr['amr_WerkelijkVerbruik_2017_Norm'] + clean_amr['amr_WerkelijkVerbruik_2018_Norm']\\\r\n",
							"    + clean_amr['amr_WerkelijkVerbruik_2019_Norm'] + clean_amr['amr_WerkelijkVerbruik_2020_Norm'] + clean_amr['amr_WerkelijkVerbruik_2021_Norm']\\\r\n",
							"    + clean_amr['amr_WerkelijkVerbruik_2022_Norm'])/6)\r\n",
							"\r\n",
							"    clean_amr['amr_Gemiddeld_BenaderendVerbruik'] = ((clean_amr['amr_BenaderendVerbruik_2017'] + clean_amr['amr_BenaderendVerbruik_2018']\\\r\n",
							"    + clean_amr['amr_BenaderendVerbruik_2019'] + clean_amr['amr_BenaderendVerbruik_2020'] + clean_amr['amr_BenaderendVerbruik_2021']\\\r\n",
							"    + clean_amr['amr_BenaderendVerbruik_2022'])/6)\r\n",
							"\r\n",
							"    clean_amr['amr_Gemiddeld_BenaderendVerbruik_Norm'] = ((clean_amr['amr_BenaderendVerbruik_2017_Norm'] + clean_amr['amr_BenaderendVerbruik_2018_Norm']\\\r\n",
							"    + clean_amr['amr_BenaderendVerbruik_2019_Norm'] + clean_amr['amr_BenaderendVerbruik_2020_Norm'] + clean_amr['amr_BenaderendVerbruik_2021_Norm']\\\r\n",
							"    + clean_amr['amr_BenaderendVerbruik_2022_Norm'])/6)\r\n",
							"\r\n",
							"    clean_amr['amr_Total_AantalToegangspunten'] = ((clean_amr['amr_AantalToegangspunten_2017'] + clean_amr['amr_AantalToegangspunten_2018']\\\r\n",
							"    + clean_amr['amr_AantalToegangspunten_2019'] + clean_amr['amr_AantalToegangspunten_2020'] + clean_amr['amr_AantalToegangspunten_2021']\\\r\n",
							"    + clean_amr['amr_AantalToegangspunten_2022'])/6)\r\n",
							"\r\n",
							"    agg_clean_amr = clean_amr[['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2022', 'amr_WerkelijkVerbruik_2022', 'amr_WerkelijkVerbruik_2022_Norm', 'amr_BenaderendVerbruik_2022', 'amr_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik'\\\r\n",
							"    , 'amr_Gemiddeld_BenaderendVerbruik_Norm']]"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# agg_clean_amr.columns\r\n",
							"display(agg_clean_amr)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## DIGITAL ETL"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Read and Load DM Data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Read digital file for pandas\r\n",
							"dmr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/{}/P6523_Verbruiken_DM_GEMEENTE_{}.csv' .format(FolderName, FolderName_SeperatorRemoved)\r\n",
							"dmr_delimiter_type = (f_get_delimiter(dmr_Filename))\r\n",
							"\r\n",
							"DMData = spark.read.load(dmr_Filename,format='csv',inferschema=True,header=True,delimiter=dmr_delimiter_type) "
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Convert Dataset to Pandas"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#COnvert To Pandas\r\n",
							"DMData = DMData.select(\"*\").toPandas()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Transform DM Data"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### Select Required Columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    select_dm = DMData[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017','BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018','BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019','BenaderendVerbruik_VM_2019_Norm', 'AantalToegangspunten_2019'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020','BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021','BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021']]\r\n",
							"else:\r\n",
							"    select_dm = DMData[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017','BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018','BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019','BenaderendVerbruik_VM_2019_Norm', 'AantalToegangspunten_2019'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020','BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021','BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2022', 'BenaderendVerbruik_VM_2022','BenaderendVerbruik_VM_2022_Norm', 'AantalToegangspunten_2022']]"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### Fix Date Error"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"#Convert datetime\r\n",
							"#d = day, m = month, y = year, b = month name\r\n",
							"\r\n",
							"try:\r\n",
							"    select_dm['Peildatum'] = pd.to_datetime(select_dm['Peildatum'], format= '%d/%b/%y')\r\n",
							"except:\r\n",
							"    try:\r\n",
							"        select_dm['Peildatum'] = pd.to_datetime(select_dm['Peildatum'], format='%m/%d/%y')\r\n",
							"    except:\r\n",
							"        try:\r\n",
							"            select_dm['Peildatum'] = pd.to_datetime(select_dm['Peildatum'], format='%d/%b/%Y')\r\n",
							"        except:\r\n",
							"            select_dm['Peildatum'] = pd.to_datetime(select_dm['Peildatum'], format='%d-%b-%y')\r\n",
							"        \r\n",
							"\r\n",
							"#Convert to desired format\r\n",
							"select_dm['Peildatum'] = select_dm['Peildatum'].dt.strftime('%d-%m-%Y')"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### Convert Numerical columns from string to float for years < 2023"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"select_dm.dtypes"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    select_dm[\"WerkelijkVerbruik_RM_2017\"] = select_dm [\"WerkelijkVerbruik_RM_2017\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"WerkelijkVerbruik_RM_2018\"] = select_dm [\"WerkelijkVerbruik_RM_2018\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"WerkelijkVerbruik_RM_2019\"] = select_dm [\"WerkelijkVerbruik_RM_2019\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"WerkelijkVerbruik_RM_2020\"] = select_dm [\"WerkelijkVerbruik_RM_2020\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"WerkelijkVerbruik_RM_2021\"] = select_dm [\"WerkelijkVerbruik_RM_2021\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2017\"] = select_dm [\"BenaderendVerbruik_VM_2017\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2018\"] = select_dm [\"BenaderendVerbruik_VM_2018\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2019\"] = select_dm [\"BenaderendVerbruik_VM_2019\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2020\"] = select_dm [\"BenaderendVerbruik_VM_2020\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2021\"] = select_dm [\"BenaderendVerbruik_VM_2021\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2017_Norm\"] = select_dm [\"BenaderendVerbruik_VM_2017_Norm\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2018_Norm\"] = select_dm [\"BenaderendVerbruik_VM_2018_Norm\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2019_Norm\"] = select_dm [\"BenaderendVerbruik_VM_2019_Norm\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2020_Norm\"] = select_dm [\"BenaderendVerbruik_VM_2020_Norm\"].str.replace(',','.').astype(float)\r\n",
							"    select_dm[\"BenaderendVerbruik_VM_2021_Norm\"] = select_dm [\"BenaderendVerbruik_VM_2021_Norm\"].str.replace(',','.').astype(float)"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### Group DM Data for Granularity"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023 :\r\n",
							"    group_dm = select_dm.groupby(['Trekkingsdatum','Peildatum','Markt','Leveringsadres_Postcode','Leveringsadres_Gemeente'], as_index=True).agg(\\\r\n",
							"    {'AantalToegangspunten_2017': 'sum','WerkelijkVerbruik_RM_2017': 'sum','BenaderendVerbruik_VM_2017': 'sum','BenaderendVerbruik_VM_2017_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2018': 'sum','WerkelijkVerbruik_RM_2018': 'sum','BenaderendVerbruik_VM_2018': 'sum','BenaderendVerbruik_VM_2018_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2019': 'sum','WerkelijkVerbruik_RM_2019': 'sum','BenaderendVerbruik_VM_2019': 'sum','BenaderendVerbruik_VM_2019_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2020': 'sum','WerkelijkVerbruik_RM_2020': 'sum','BenaderendVerbruik_VM_2020': 'sum','BenaderendVerbruik_VM_2020_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2021': 'sum','WerkelijkVerbruik_RM_2021': 'sum','BenaderendVerbruik_VM_2021': 'sum','BenaderendVerbruik_VM_2021_Norm': 'sum'}).reset_index()\r\n",
							"else:\r\n",
							"    group_dm = select_dm.groupby(['Trekkingsdatum','Peildatum','Markt','Leveringsadres_Postcode','Leveringsadres_Gemeente'], as_index=True).agg(\\\r\n",
							"    {'AantalToegangspunten_2017': 'sum','WerkelijkVerbruik_RM_2017': 'sum','BenaderendVerbruik_VM_2017': 'sum','BenaderendVerbruik_VM_2017_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2018': 'sum','WerkelijkVerbruik_RM_2018': 'sum','BenaderendVerbruik_VM_2018': 'sum','BenaderendVerbruik_VM_2018_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2019': 'sum','WerkelijkVerbruik_RM_2019': 'sum','BenaderendVerbruik_VM_2019': 'sum','BenaderendVerbruik_VM_2019_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2020': 'sum','WerkelijkVerbruik_RM_2020': 'sum','BenaderendVerbruik_VM_2020': 'sum','BenaderendVerbruik_VM_2020_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2021': 'sum','WerkelijkVerbruik_RM_2021': 'sum','BenaderendVerbruik_VM_2021': 'sum','BenaderendVerbruik_VM_2021_Norm': 'sum'\\\r\n",
							"    ,'AantalToegangspunten_2022': 'sum','WerkelijkVerbruik_RM_2022': 'sum','BenaderendVerbruik_VM_2022': 'sum','BenaderendVerbruik_VM_2022_Norm': 'sum'}).reset_index()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Rename Columns and Select Required Columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"#rename columns\r\n",
							" #inplace true overrides existing dataframe\r\n",
							"\r\n",
							"if int(year) < 2023:\r\n",
							"    select_dm = group_dm.rename({'Trekkingsdatum':'dm_Trekkingsdatum', 'Peildatum':'dm_Peildatum', 'Markt':'dm_Markt', 'Leveringsadres_Postcode':'dm_Leveringsadres_Postcode'\r\n",
							"    , 'Leveringsadres_Gemeente':'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017':'dm_WerkelijkVerbruik_2017', 'BenaderendVerbruik_VM_2017':'dm_BenaderendVerbruik_2017', 'BenaderendVerbruik_VM_2017_Norm': 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018':'dm_WerkelijkVerbruik_2018', 'BenaderendVerbruik_VM_2018':'dm_BenaderendVerbruik_2018', 'BenaderendVerbruik_VM_2018_Norm': 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019':'dm_WerkelijkVerbruik_2019', 'BenaderendVerbruik_VM_2019':'dm_BenaderendVerbruik_2019', 'BenaderendVerbruik_VM_2019_Norm': 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020':'dm_WerkelijkVerbruik_2020', 'BenaderendVerbruik_VM_2020':'dm_BenaderendVerbruik_2020', 'BenaderendVerbruik_VM_2020_Norm': 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021':'dm_WerkelijkVerbruik_2021', 'BenaderendVerbruik_VM_2021':'dm_BenaderendVerbruik_2021', 'BenaderendVerbruik_VM_2021_Norm': 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'AantalToegangspunten_2017':'dm_AantalToegangspunten_2017', 'AantalToegangspunten_2018':'dm_AantalToegangspunten_2018', 'AantalToegangspunten_2019':'dm_AantalToegangspunten_2019'\\\r\n",
							"    , 'AantalToegangspunten_2020':'dm_AantalToegangspunten_2020', 'AantalToegangspunten_2021':'dm_AantalToegangspunten_2021'}, axis='columns')\r\n",
							"\r\n",
							"    #Create Norms\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2017_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2017\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2018_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2018\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2019_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2019\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2020_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2020\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2021_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2021\"]\r\n",
							"\r\n",
							"    #rearrange\r\n",
							"    clean_dm = select_dm[['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm']]\r\n",
							"else:\r\n",
							"    select_dm = group_dm.rename({'Trekkingsdatum':'dm_Trekkingsdatum', 'Peildatum':'dm_Peildatum', 'Markt':'dm_Markt', 'Leveringsadres_Postcode':'dm_Leveringsadres_Postcode'\r\n",
							"    , 'Leveringsadres_Gemeente':'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2017':'dm_WerkelijkVerbruik_2017', 'BenaderendVerbruik_VM_2017':'dm_BenaderendVerbruik_2017', 'BenaderendVerbruik_VM_2017_Norm': 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2018':'dm_WerkelijkVerbruik_2018', 'BenaderendVerbruik_VM_2018':'dm_BenaderendVerbruik_2018', 'BenaderendVerbruik_VM_2018_Norm': 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2019':'dm_WerkelijkVerbruik_2019', 'BenaderendVerbruik_VM_2019':'dm_BenaderendVerbruik_2019', 'BenaderendVerbruik_VM_2019_Norm': 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2020':'dm_WerkelijkVerbruik_2020', 'BenaderendVerbruik_VM_2020':'dm_BenaderendVerbruik_2020', 'BenaderendVerbruik_VM_2020_Norm': 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2021':'dm_WerkelijkVerbruik_2021', 'BenaderendVerbruik_VM_2021':'dm_BenaderendVerbruik_2021', 'BenaderendVerbruik_VM_2021_Norm': 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'WerkelijkVerbruik_RM_2022':'dm_WerkelijkVerbruik_2022', 'BenaderendVerbruik_VM_2022':'dm_BenaderendVerbruik_2022', 'BenaderendVerbruik_VM_2022_Norm': 'dm_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'AantalToegangspunten_2017':'dm_AantalToegangspunten_2017', 'AantalToegangspunten_2018':'dm_AantalToegangspunten_2018', 'AantalToegangspunten_2019':'dm_AantalToegangspunten_2019'\\\r\n",
							"    , 'AantalToegangspunten_2020':'dm_AantalToegangspunten_2020', 'AantalToegangspunten_2021':'dm_AantalToegangspunten_2021', 'AantalToegangspunten_2022':'dm_AantalToegangspunten_2022'}, axis='columns')\r\n",
							"\r\n",
							"    #Create Norms\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2017_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2017\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2018_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2018\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2019_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2019\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2020_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2020\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2021_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2021\"]\r\n",
							"    select_dm[\"dm_WerkelijkVerbruik_2022_Norm\"] = select_dm [\"dm_WerkelijkVerbruik_2022\"]\r\n",
							"\r\n",
							"    #rearrange\r\n",
							"    clean_dm = select_dm[['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2022', 'dm_WerkelijkVerbruik_2022', 'dm_WerkelijkVerbruik_2022_Norm', 'dm_BenaderendVerbruik_2022', 'dm_BenaderendVerbruik_2022_Norm']]"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Aggregate DM Values and rearrange columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    clean_dm['dm_Gemiddeld_WerkelijkVerbruik'] = ((clean_dm['dm_WerkelijkVerbruik_2017'] + clean_dm['dm_WerkelijkVerbruik_2018']\\\r\n",
							"    + clean_dm['dm_WerkelijkVerbruik_2019'] + clean_dm['dm_WerkelijkVerbruik_2020']+ clean_dm['dm_WerkelijkVerbruik_2021'])/5)\r\n",
							"\r\n",
							"    clean_dm['dm_Gemiddeld_WerkelijkVerbruik_Norm'] = ((clean_dm['dm_WerkelijkVerbruik_2017_Norm'] + clean_dm['dm_WerkelijkVerbruik_2018_Norm']\\\r\n",
							"    + clean_dm['dm_WerkelijkVerbruik_2019_Norm'] + clean_dm['dm_WerkelijkVerbruik_2020_Norm'] + clean_dm['dm_WerkelijkVerbruik_2021_Norm'])/5)\r\n",
							"\r\n",
							"    clean_dm['dm_Gemiddeld_BenaderendVerbruik'] = ((clean_dm['dm_BenaderendVerbruik_2017'] + clean_dm['dm_BenaderendVerbruik_2018']\\\r\n",
							"    + clean_dm['dm_BenaderendVerbruik_2019'] + clean_dm['dm_BenaderendVerbruik_2020'] + clean_dm['dm_BenaderendVerbruik_2021'])/5)\r\n",
							"\r\n",
							"    clean_dm['dm_Gemiddeld_BenaderendVerbruik_Norm'] = ((clean_dm['dm_BenaderendVerbruik_2017_Norm'] + clean_dm['dm_BenaderendVerbruik_2018_Norm']\\\r\n",
							"    + clean_dm['dm_BenaderendVerbruik_2019_Norm'] + clean_dm['dm_BenaderendVerbruik_2020_Norm'] + clean_dm['dm_BenaderendVerbruik_2021_Norm'])/5)\r\n",
							"\r\n",
							"    clean_dm['dm_Total_AantalToegangspunten'] = ((clean_dm['dm_AantalToegangspunten_2017'] + clean_dm['dm_AantalToegangspunten_2018']\\\r\n",
							"    + clean_dm['dm_AantalToegangspunten_2019'] + clean_dm['dm_AantalToegangspunten_2020'] + clean_dm['dm_AantalToegangspunten_2021'])/5)\r\n",
							"\r\n",
							"    agg_clean_dm = clean_dm[['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik'\\\r\n",
							"    , 'dm_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"\r\n",
							"else:\r\n",
							"    clean_dm['dm_Gemiddeld_WerkelijkVerbruik'] = ((clean_dm['dm_WerkelijkVerbruik_2017'] + clean_dm['dm_WerkelijkVerbruik_2018']\\\r\n",
							"    + clean_dm['dm_WerkelijkVerbruik_2019'] + clean_dm['dm_WerkelijkVerbruik_2020']+ clean_dm['dm_WerkelijkVerbruik_2021']\\\r\n",
							"    + clean_dm['dm_WerkelijkVerbruik_2022'])/6)\r\n",
							"\r\n",
							"    clean_dm['dm_Gemiddeld_WerkelijkVerbruik_Norm'] = ((clean_dm['dm_WerkelijkVerbruik_2017_Norm'] + clean_dm['dm_WerkelijkVerbruik_2018_Norm']\\\r\n",
							"    + clean_dm['dm_WerkelijkVerbruik_2019_Norm'] + clean_dm['dm_WerkelijkVerbruik_2020_Norm'] + clean_dm['dm_WerkelijkVerbruik_2021_Norm']\\\r\n",
							"    + clean_dm['dm_WerkelijkVerbruik_2022_Norm'])/6)\r\n",
							"\r\n",
							"    clean_dm['dm_Gemiddeld_BenaderendVerbruik'] = ((clean_dm['dm_BenaderendVerbruik_2017'] + clean_dm['dm_BenaderendVerbruik_2018']\\\r\n",
							"    + clean_dm['dm_BenaderendVerbruik_2019'] + clean_dm['dm_BenaderendVerbruik_2020'] + clean_dm['dm_BenaderendVerbruik_2021']\\\r\n",
							"    + clean_dm['dm_BenaderendVerbruik_2022'])/6)\r\n",
							"\r\n",
							"    clean_dm['dm_Gemiddeld_BenaderendVerbruik_Norm'] = ((clean_dm['dm_BenaderendVerbruik_2017_Norm'] + clean_dm['dm_BenaderendVerbruik_2018_Norm']\\\r\n",
							"    + clean_dm['dm_BenaderendVerbruik_2019_Norm'] + clean_dm['dm_BenaderendVerbruik_2020_Norm'] + clean_dm['dm_BenaderendVerbruik_2021_Norm']\\\r\n",
							"    + clean_dm['dm_BenaderendVerbruik_2022_Norm'])/6)\r\n",
							"\r\n",
							"    clean_dm['dm_Total_AantalToegangspunten'] = ((clean_dm['dm_AantalToegangspunten_2017'] + clean_dm['dm_AantalToegangspunten_2018']\\\r\n",
							"    + clean_dm['dm_AantalToegangspunten_2019'] + clean_dm['dm_AantalToegangspunten_2020'] + clean_dm['dm_AantalToegangspunten_2021']\\\r\n",
							"    + clean_dm['dm_AantalToegangspunten_2022'])/6)\r\n",
							"\r\n",
							"    agg_clean_dm = clean_dm[['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2022', 'dm_WerkelijkVerbruik_2022', 'dm_WerkelijkVerbruik_2022_Norm', 'dm_BenaderendVerbruik_2022', 'dm_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik'\\\r\n",
							"    , 'dm_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							""
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(agg_clean_dm)\r\n",
							"display(agg_clean_amr)"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Create final_amr and final_dm Dataframe"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Change Postcode from Decimal to Int"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Int64 maintains the datatype after join even with null values available. that way post code doesn't have a decimal\r\n",
							"agg_clean_dm['dm_Leveringsadres_Postcode'] = agg_clean_dm['dm_Leveringsadres_Postcode'].astype('Int64')\r\n",
							"agg_clean_amr['amr_Leveringsadres_Postcode'] = agg_clean_amr['amr_Leveringsadres_Postcode'].astype('Int64')"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Final Dataframe for AMR and DM"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    final_amr = agg_clean_amr[['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik','amr_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"    \r\n",
							"    final_dm = agg_clean_dm[['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik','dm_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"else:\r\n",
							"    final_amr = agg_clean_amr[['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2022', 'amr_WerkelijkVerbruik_2022', 'amr_WerkelijkVerbruik_2022_Norm', 'amr_BenaderendVerbruik_2022', 'amr_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik','amr_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"\r\n",
							"    final_dm = agg_clean_dm[['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2022', 'dm_WerkelijkVerbruik_2022', 'dm_WerkelijkVerbruik_2022_Norm', 'dm_BenaderendVerbruik_2022', 'dm_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik','dm_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Perform Full Outer Join"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# join() is used to combine two DataFrames on the index but not on columns \r\n",
							"#whereas merge() is primarily used to specify the columns you wanted to join on\r\n",
							"#Merge is useful when we don’t want to join on the index. \r\n",
							"\r\n",
							"final_amr_dm = pd.merge(final_amr, final_dm, left_on=['amr_Trekkingsdatum', 'amr_Peildatum', 'amr_Markt', 'amr_Leveringsadres_Postcode', 'amr_Leveringsadres_Gemeente'],\\\r\n",
							"right_on=['dm_Trekkingsdatum', 'dm_Peildatum', 'dm_Markt', 'dm_Leveringsadres_Postcode', 'dm_Leveringsadres_Gemeente'], how = 'outer')\r\n",
							"print('FULL OUTER JOIN COMPLETE')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(final_amr_dm)"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Count Rows before and after join"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# check Counts on total file\r\n",
							"print('Analogue Count: ',final_amr.shape[0])\r\n",
							"print('Digital Count: ',final_dm.shape[0])\r\n",
							"print('Total Join Count:',final_amr_dm.shape[0])"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Coalesce Undefined Grouped Values"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"final_amr_dm['Trekkingsdatum'] = final_amr_dm['amr_Trekkingsdatum'].combine_first(final_amr_dm['dm_Trekkingsdatum'])\r\n",
							"final_amr_dm['Peildatum'] = final_amr_dm['amr_Peildatum'].combine_first(final_amr_dm['dm_Peildatum'])\r\n",
							"final_amr_dm['Markt'] = final_amr_dm['amr_Markt'].combine_first(final_amr_dm['dm_Markt'])\r\n",
							"final_amr_dm['Leveringsadres_Postcode'] = final_amr_dm['amr_Leveringsadres_Postcode'].combine_first(final_amr_dm['dm_Leveringsadres_Postcode'])\r\n",
							"final_amr_dm['Leveringsadres_Gemeente'] = final_amr_dm['amr_Leveringsadres_Gemeente'].combine_first(final_amr_dm['dm_Leveringsadres_Gemeente'])"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(final_amr_dm)"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    final_amr_dm = final_amr_dm[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik','amr_Gemiddeld_BenaderendVerbruik_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik','dm_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"else:\r\n",
							"    final_amr_dm = final_amr_dm[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2022', 'amr_WerkelijkVerbruik_2022', 'amr_WerkelijkVerbruik_2022_Norm', 'amr_BenaderendVerbruik_2022', 'amr_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2022', 'dm_WerkelijkVerbruik_2022', 'dm_WerkelijkVerbruik_2022_Norm', 'dm_BenaderendVerbruik_2022', 'dm_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik','amr_Gemiddeld_BenaderendVerbruik_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik','dm_Gemiddeld_BenaderendVerbruik_Norm']]\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Calculate Total for aggregate values"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Calculate Total\r\n",
							"final_amr_dm['Total_AantalToegangspunten'] = (final_amr_dm['amr_Total_AantalToegangspunten'] + final_amr_dm['dm_Total_AantalToegangspunten'])\r\n",
							"final_amr_dm['Total_BenaderendVerbruik'] = (final_amr_dm['amr_Gemiddeld_BenaderendVerbruik'] + final_amr_dm['dm_Gemiddeld_BenaderendVerbruik'])\r\n",
							"final_amr_dm['Total_BenaderendVerbruik_Norm'] = (final_amr_dm['amr_Gemiddeld_BenaderendVerbruik_Norm'] + final_amr_dm['dm_Gemiddeld_BenaderendVerbruik_Norm'])\r\n",
							"final_amr_dm['Total_WerkelijkVerbruik'] = (final_amr_dm['amr_Gemiddeld_WerkelijkVerbruik'] + final_amr_dm['dm_Gemiddeld_WerkelijkVerbruik'])\r\n",
							"final_amr_dm['Total_WerkelijkVerbruik_Norm'] = (final_amr_dm['amr_Gemiddeld_WerkelijkVerbruik_Norm'] + final_amr_dm['dm_Gemiddeld_WerkelijkVerbruik_Norm'])"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Select Final Columns/Attributes"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if int(year) < 2023:\r\n",
							"    final_file = final_amr_dm[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik','amr_Gemiddeld_BenaderendVerbruik_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik','dm_Gemiddeld_BenaderendVerbruik_Norm'\\\r\n",
							"    ,'Total_AantalToegangspunten', 'Total_BenaderendVerbruik', 'Total_BenaderendVerbruik_Norm', 'Total_WerkelijkVerbruik', 'Total_WerkelijkVerbruik_Norm']]\r\n",
							"else:\r\n",
							"    final_file = final_amr_dm[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							"    , 'amr_AantalToegangspunten_2017', 'amr_WerkelijkVerbruik_2017', 'amr_WerkelijkVerbruik_2017_Norm', 'amr_BenaderendVerbruik_2017', 'amr_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2018', 'amr_WerkelijkVerbruik_2018', 'amr_WerkelijkVerbruik_2018_Norm', 'amr_BenaderendVerbruik_2018', 'amr_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2019', 'amr_WerkelijkVerbruik_2019', 'amr_WerkelijkVerbruik_2019_Norm', 'amr_BenaderendVerbruik_2019', 'amr_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2020', 'amr_WerkelijkVerbruik_2020', 'amr_WerkelijkVerbruik_2020_Norm', 'amr_BenaderendVerbruik_2020', 'amr_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2021', 'amr_WerkelijkVerbruik_2021', 'amr_WerkelijkVerbruik_2021_Norm', 'amr_BenaderendVerbruik_2021', 'amr_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'amr_AantalToegangspunten_2022', 'amr_WerkelijkVerbruik_2022', 'amr_WerkelijkVerbruik_2022_Norm', 'amr_BenaderendVerbruik_2022', 'amr_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2017', 'dm_WerkelijkVerbruik_2017', 'dm_WerkelijkVerbruik_2017_Norm', 'dm_BenaderendVerbruik_2017', 'dm_BenaderendVerbruik_2017_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2018', 'dm_WerkelijkVerbruik_2018', 'dm_WerkelijkVerbruik_2018_Norm', 'dm_BenaderendVerbruik_2018', 'dm_BenaderendVerbruik_2018_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2019', 'dm_WerkelijkVerbruik_2019', 'dm_WerkelijkVerbruik_2019_Norm', 'dm_BenaderendVerbruik_2019', 'dm_BenaderendVerbruik_2019_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2020', 'dm_WerkelijkVerbruik_2020', 'dm_WerkelijkVerbruik_2020_Norm', 'dm_BenaderendVerbruik_2020', 'dm_BenaderendVerbruik_2020_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2021', 'dm_WerkelijkVerbruik_2021', 'dm_WerkelijkVerbruik_2021_Norm', 'dm_BenaderendVerbruik_2021', 'dm_BenaderendVerbruik_2021_Norm'\\\r\n",
							"    , 'dm_AantalToegangspunten_2022', 'dm_WerkelijkVerbruik_2022', 'dm_WerkelijkVerbruik_2022_Norm', 'dm_BenaderendVerbruik_2022', 'dm_BenaderendVerbruik_2022_Norm'\\\r\n",
							"    , 'amr_Total_AantalToegangspunten','amr_Gemiddeld_WerkelijkVerbruik','amr_Gemiddeld_WerkelijkVerbruik_Norm','amr_Gemiddeld_BenaderendVerbruik','amr_Gemiddeld_BenaderendVerbruik_Norm'\\\r\n",
							"    , 'dm_Total_AantalToegangspunten','dm_Gemiddeld_WerkelijkVerbruik','dm_Gemiddeld_WerkelijkVerbruik_Norm','dm_Gemiddeld_BenaderendVerbruik','dm_Gemiddeld_BenaderendVerbruik_Norm'\\\r\n",
							"    ,'Total_AantalToegangspunten', 'Total_BenaderendVerbruik', 'Total_BenaderendVerbruik_Norm', 'Total_WerkelijkVerbruik', 'Total_WerkelijkVerbruik_Norm']]\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(final_file)"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Fill NaN Values with 0"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# fill NaN values with 0\r\n",
							"final_file = final_file.fillna(0)\r\n",
							"display(final_file)"
						],
						"outputs": [],
						"execution_count": 548
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Convert Dataframe to PySpark before writing to Blob"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#It is advisable to convert your dataframe back to pyspark since pandas is a python library before saving to disk inorder to have variable options\r\n",
							"pd_final_file = spark.createDataFrame(final_file)\r\n",
							"#Write to disk"
						],
						"outputs": [],
						"execution_count": 549
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"## Write Dataframe to Blob Storage\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://silverdata@dlscloubisintern.dfs.core.windows.net/Join/Pandas'\r\n",
							"write_format = \"delta\"\r\n",
							"partition_col = [\"Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"pd_final_file\\\r\n",
							".write\\\r\n",
							".option(\"header\", True)\\\r\n",
							".option(\"overwriteSchema\", True)\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_col)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)\r\n",
							"\r\n",
							"print(\"Writing File to \" + file_path + \" Complete with Mode \" + mode_)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pandas_Load_Data_From_Blob_To_Synapse_SQL_Pool')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load Data From Blob To Synapse SQL Pool",
				"folder": {
					"name": "Master Pipeline Notebooks"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "devpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4ddd7f87-80f4-48ef-9c00-9ada3653adc6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/devpool",
						"name": "devpool",
						"type": "Spark",
						"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/devpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Getiing the parameter value from the pipeline \r\n",
							"FolderName = \"2023_02\"\r\n",
							"Mode = \"overwrite\""
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# Using the parameter value creating a new variables to use while reading the file\r\n",
							"FolderName_Without_Separator = FolderName.replace(\"_\", \"\")\r\n",
							"year = int(FolderName.split('_')[0])\r\n",
							"month = int(FolderName.split('_')[1])"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import lit,col\r\n",
							"\r\n",
							"# Creating a spark session and connection to blob storage account\r\n",
							"blob_account_name = \"rawdevstorage\"\r\n",
							"blob_container_name = \"rawdata\"\r\n",
							"sc = SparkSession.builder.getOrCreate()\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex for AMR\r\n",
							"import re\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_AMR_GEMEENTE_%s.csv' % (FolderName, FolderName_Without_Separator)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Reading the first File (Analogue Reading File)\r\n",
							"FileName = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_AMR_GEMEENTE_%s.csv' % (FolderName,FolderName_Without_Separator)\r\n",
							"df1 = spark.read.load(FileName, format='csv', header=True,delimiter=amr_delimiter_type,inferSchema=True)\r\n",
							"\r\n",
							"# Convert to pandas data frame\r\n",
							"df1 = df1.select(\"*\").toPandas()\r\n",
							"\r\n",
							"# Importing the libraries\r\n",
							"import pandas as pd\r\n",
							"import warnings\r\n",
							"warnings.filterwarnings('ignore')\r\n",
							"\r\n",
							"# Dropping the duplicates\r\n",
							"df1 = df1.drop_duplicates()\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"selected_df1 = df1[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							", 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017', 'AantalToegangspunten_2017'\\\r\n",
							", 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018', 'AantalToegangspunten_2018'\\\r\n",
							", 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'AantalToegangspunten_2019'\\\r\n",
							", 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'AantalToegangspunten_2021']]\r\n",
							"\r\n",
							"# Adding the additional calculated/custom columns\r\n",
							"selected_df1['MeasurementType'] = \"Analogue\"\r\n",
							"#selected_df1['MeasurementYear'] = year\r\n",
							"#selected_df1['MeasurementMonth'] = month\r\n",
							"\r\n",
							"# convert the date column to datetime\r\n",
							"try:\r\n",
							"    selected_df1['Peildatum'] = pd.to_datetime(selected_df1['Peildatum'], format='%d/%b/%y')\r\n",
							"except:\r\n",
							"    try:\r\n",
							"        selected_df1['Peildatum'] = pd.to_datetime(selected_df1['Peildatum'], format='%m/%d/%y')\r\n",
							"    except:\r\n",
							"        try:\r\n",
							"            selected_df1['Peildatum'] = pd.to_datetime(selected_df1['Peildatum'], format='%d/%b/%Y')\r\n",
							"        except:\r\n",
							"            selected_df1['Peildatum'] = pd.to_datetime(selected_df1['Peildatum'], format='%d-%b-%y')\r\n",
							"\r\n",
							"# convert the datetime object to the desired format\r\n",
							"selected_df1['Peildatum'] = selected_df1['Peildatum'].dt.strftime('%d-%m-%Y')\r\n",
							"\r\n",
							"selected_df1['BenaderendVerbruik_VM_2017_Norm'] = selected_df1[\"BenaderendVerbruik_VM_2017\"]\r\n",
							"selected_df1['BenaderendVerbruik_VM_2018_Norm'] = selected_df1[\"BenaderendVerbruik_VM_2018\"]\r\n",
							"selected_df1['BenaderendVerbruik_VM_2019_Norm'] = selected_df1[\"BenaderendVerbruik_VM_2019\"]\r\n",
							"selected_df1['BenaderendVerbruik_VM_2020_Norm'] = selected_df1[\"BenaderendVerbruik_VM_2020\"]\r\n",
							"selected_df1['BenaderendVerbruik_VM_2021_Norm'] = selected_df1[\"BenaderendVerbruik_VM_2021\"]\r\n",
							"\r\n",
							"#selected_df1['WerkelijkVerbruik_RM_2017'].head(1).dtypes == \"object\":\r\n",
							"if year < 2023:\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2017'] = selected_df1['WerkelijkVerbruik_RM_2017'].str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2018'] = selected_df1['WerkelijkVerbruik_RM_2018'].str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2019'] = selected_df1['WerkelijkVerbruik_RM_2019'].str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2020'] = selected_df1['WerkelijkVerbruik_RM_2020'].str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2021'] = selected_df1['WerkelijkVerbruik_RM_2021'].str.replace(',','.')\r\n",
							"else:\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2017'] = selected_df1['WerkelijkVerbruik_RM_2017'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2018'] = selected_df1['WerkelijkVerbruik_RM_2018'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2019'] = selected_df1['WerkelijkVerbruik_RM_2019'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2020'] = selected_df1['WerkelijkVerbruik_RM_2020'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['WerkelijkVerbruik_RM_2021'] = selected_df1['WerkelijkVerbruik_RM_2021'].astype(str).str.replace(',','.')\r\n",
							"selected_df1['Gemiddeld_WerkelijkVerbruik'] = ((selected_df1['WerkelijkVerbruik_RM_2017'].astype(float)\\\r\n",
							"+ selected_df1['WerkelijkVerbruik_RM_2018'].astype(float) + selected_df1['WerkelijkVerbruik_RM_2019'].astype(float) + selected_df1['WerkelijkVerbruik_RM_2020'].astype(float)\\\r\n",
							"+ selected_df1['WerkelijkVerbruik_RM_2021'].astype(float))/5)\r\n",
							"\r\n",
							"if year < 2023:\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2017'] = selected_df1['BenaderendVerbruik_VM_2017'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2018'] = selected_df1['BenaderendVerbruik_VM_2018'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2019'] = selected_df1['BenaderendVerbruik_VM_2019'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2020'] = selected_df1['BenaderendVerbruik_VM_2020'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2021'] = selected_df1['BenaderendVerbruik_VM_2021'].str.replace(',','.')\r\n",
							"else:\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2017'] = selected_df1['BenaderendVerbruik_VM_2017'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2018'] = selected_df1['BenaderendVerbruik_VM_2018'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2019'] = selected_df1['BenaderendVerbruik_VM_2019'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2020'] = selected_df1['BenaderendVerbruik_VM_2020'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2021'] = selected_df1['BenaderendVerbruik_VM_2021'].astype(str).str.replace(',','.')\r\n",
							"selected_df1['Gemiddeld_BenaderendVerbruik'] = ((selected_df1['BenaderendVerbruik_VM_2017'].astype(float)\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2018'].astype(float) + selected_df1['BenaderendVerbruik_VM_2019'].astype(float) + selected_df1['BenaderendVerbruik_VM_2020'].astype(float)\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2021'].astype(float))/5)\r\n",
							"\r\n",
							"if year < 2023:\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2017_Norm'] = selected_df1['BenaderendVerbruik_VM_2017_Norm'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2018_Norm'] = selected_df1['BenaderendVerbruik_VM_2018_Norm'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2019_Norm'] = selected_df1['BenaderendVerbruik_VM_2019_Norm'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2020_Norm'] = selected_df1['BenaderendVerbruik_VM_2020_Norm'].str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2021_Norm'] = selected_df1['BenaderendVerbruik_VM_2021_Norm'].str.replace(',','.')\r\n",
							"else:\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2017_Norm'] = selected_df1['BenaderendVerbruik_VM_2017_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2018_Norm'] = selected_df1['BenaderendVerbruik_VM_2018_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2019_Norm'] = selected_df1['BenaderendVerbruik_VM_2019_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2020_Norm'] = selected_df1['BenaderendVerbruik_VM_2020_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df1['BenaderendVerbruik_VM_2021_Norm'] = selected_df1['BenaderendVerbruik_VM_2021_Norm'].astype(str).str.replace(',','.')\r\n",
							"selected_df1['Gemiddeld_BenaderendVerbruik_Norm'] = ((selected_df1['BenaderendVerbruik_VM_2017_Norm'].astype(float)\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2018_Norm'].astype(float) + selected_df1['BenaderendVerbruik_VM_2019_Norm'].astype(float) + selected_df1['BenaderendVerbruik_VM_2020_Norm'].astype(float)\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2021_Norm'].astype(float))/5)\r\n",
							"\r\n",
							"selected_df1['Total_AantalToegangspunten'] = selected_df1['AantalToegangspunten_2017'].astype(float)\\\r\n",
							"+ selected_df1['AantalToegangspunten_2018'].astype(float) + selected_df1['AantalToegangspunten_2019'].astype(float) + selected_df1['AantalToegangspunten_2020'].astype(float)\\\r\n",
							"+ selected_df1['AantalToegangspunten_2021'].astype(float)\r\n",
							"\r\n",
							"# Rearrange the columns\r\n",
							"selected_df1 = selected_df1[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente', 'WerkelijkVerbruik_RM_2017'\\\r\n",
							", 'BenaderendVerbruik_VM_2017', 'BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017', 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018'\\\r\n",
							", 'BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018', 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'BenaderendVerbruik_VM_2019_Norm'\\\r\n",
							", 'AantalToegangspunten_2019', 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021'\\\r\n",
							",'Gemiddeld_WerkelijkVerbruik','Gemiddeld_BenaderendVerbruik','Gemiddeld_BenaderendVerbruik_Norm','Total_AantalToegangspunten'\\\r\n",
							", 'MeasurementType']] #, 'MeasurementYear', 'MeasurementMonth'"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Checking the column names\r\n",
							"selected_df1.columns"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Selecting the top 5 rows\r\n",
							"selected_df1.head()"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex for DM\r\n",
							"import re\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_DM_GEMEENTE_%s.csv' % (FolderName, FolderName_Without_Separator)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": []
						},
						"source": [
							"\r\n",
							"# Reading the second File (Digital Reading File)\r\n",
							"FileName = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_DM_GEMEENTE_%s.csv' % (FolderName,FolderName_Without_Separator)\r\n",
							"df2 = spark.read.load(FileName, format='csv', header=True,delimiter=amr_delimiter_type,inferSchema=True)\r\n",
							"\r\n",
							"# Convert to pandas data frame\r\n",
							"df2 = df2.select(\"*\").toPandas()\r\n",
							"\r\n",
							"# Dropping the duplicates\r\n",
							"df2 = df2.drop_duplicates()\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"selected_df2 = df2[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							", 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017', 'BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017'\\\r\n",
							", 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018', 'BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018'\\\r\n",
							", 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'BenaderendVerbruik_VM_2019_Norm', 'AantalToegangspunten_2019'\\\r\n",
							", 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021']]\r\n",
							"\r\n",
							"# Adding the additional calculated/custom columns\r\n",
							"selected_df2['MeasurementType'] = \"Analogue\"\r\n",
							"#selected_df2['MeasurementYear'] = year\r\n",
							"#selected_df2['MeasurementMonth'] = month\r\n",
							"\r\n",
							"# convert the date column to datetime\r\n",
							"# convert the date column to datetime\r\n",
							"try:\r\n",
							"    selected_df2['Peildatum'] = pd.to_datetime(selected_df2['Peildatum'], format='%d/%b/%y')\r\n",
							"except:\r\n",
							"    try:\r\n",
							"        selected_df2['Peildatum'] = pd.to_datetime(selected_df2['Peildatum'], format='%m/%d/%y')\r\n",
							"    except:\r\n",
							"        try:\r\n",
							"            selected_df2['Peildatum'] = pd.to_datetime(selected_df2['Peildatum'], format='%d/%b/%Y')\r\n",
							"        except:\r\n",
							"            selected_df2['Peildatum'] = pd.to_datetime(selected_df2['Peildatum'], format='%d-%b-%y')\r\n",
							"\r\n",
							"# convert the datetime object to the desired format\r\n",
							"selected_df2['Peildatum'] = selected_df2['Peildatum'].dt.strftime('%d-%m-%Y')\r\n",
							"\r\n",
							"\r\n",
							"#selected_df2['WerkelijkVerbruik_RM_2017'].head(1).dtypes == \"object\":\r\n",
							"if year < 2023: \r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2017'] = selected_df2['WerkelijkVerbruik_RM_2017'].str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2018'] = selected_df2['WerkelijkVerbruik_RM_2018'].str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2019'] = selected_df2['WerkelijkVerbruik_RM_2019'].str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2020'] = selected_df2['WerkelijkVerbruik_RM_2020'].str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2021'] = selected_df2['WerkelijkVerbruik_RM_2021'].str.replace(',','.')\r\n",
							"else:\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2017'] = selected_df2['WerkelijkVerbruik_RM_2017'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2018'] = selected_df2['WerkelijkVerbruik_RM_2018'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2019'] = selected_df2['WerkelijkVerbruik_RM_2019'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2020'] = selected_df2['WerkelijkVerbruik_RM_2020'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['WerkelijkVerbruik_RM_2021'] = selected_df2['WerkelijkVerbruik_RM_2021'].astype(str).str.replace(',','.')\r\n",
							"selected_df2['Gemiddeld_WerkelijkVerbruik'] = ((selected_df2['WerkelijkVerbruik_RM_2017'].astype(float)\\\r\n",
							"+ selected_df2['WerkelijkVerbruik_RM_2018'].astype(float) + selected_df2['WerkelijkVerbruik_RM_2019'].astype(float) + selected_df2['WerkelijkVerbruik_RM_2020'].astype(float)\\\r\n",
							"+ selected_df2['WerkelijkVerbruik_RM_2021'].astype(float))/5)\r\n",
							"\r\n",
							"if year < 2023:\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2017'] = selected_df2['BenaderendVerbruik_VM_2017'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2018'] = selected_df2['BenaderendVerbruik_VM_2018'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2019'] = selected_df2['BenaderendVerbruik_VM_2019'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2020'] = selected_df2['BenaderendVerbruik_VM_2020'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2021'] = selected_df2['BenaderendVerbruik_VM_2021'].str.replace(',','.')\r\n",
							"else:\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2017'] = selected_df2['BenaderendVerbruik_VM_2017'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2018'] = selected_df2['BenaderendVerbruik_VM_2018'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2019'] = selected_df2['BenaderendVerbruik_VM_2019'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2020'] = selected_df2['BenaderendVerbruik_VM_2020'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2021'] = selected_df2['BenaderendVerbruik_VM_2021'].astype(str).str.replace(',','.')\r\n",
							"selected_df2['Gemiddeld_BenaderendVerbruik'] = ((selected_df2['BenaderendVerbruik_VM_2017'].astype(float)\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2018'].astype(float) + selected_df2['BenaderendVerbruik_VM_2019'].astype(float) + selected_df2['BenaderendVerbruik_VM_2020'].astype(float)\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2021'].astype(float))/5)\r\n",
							"\r\n",
							"if year < 2023:\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2017_Norm'] = selected_df2['BenaderendVerbruik_VM_2017_Norm'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2018_Norm'] = selected_df2['BenaderendVerbruik_VM_2018_Norm'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2019_Norm'] = selected_df2['BenaderendVerbruik_VM_2019_Norm'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2020_Norm'] = selected_df2['BenaderendVerbruik_VM_2020_Norm'].str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2021_Norm'] = selected_df2['BenaderendVerbruik_VM_2021_Norm'].str.replace(',','.')\r\n",
							"else:\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2017_Norm'] = selected_df2['BenaderendVerbruik_VM_2017_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2018_Norm'] = selected_df2['BenaderendVerbruik_VM_2018_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2019_Norm'] = selected_df2['BenaderendVerbruik_VM_2019_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2020_Norm'] = selected_df2['BenaderendVerbruik_VM_2020_Norm'].astype(str).str.replace(',','.')\r\n",
							"    selected_df2['BenaderendVerbruik_VM_2021_Norm'] = selected_df2['BenaderendVerbruik_VM_2021_Norm'].astype(str).str.replace(',','.')\r\n",
							"selected_df2['Gemiddeld_BenaderendVerbruik_Norm'] = ((selected_df2['BenaderendVerbruik_VM_2017_Norm'].astype(float)\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2018_Norm'].astype(float) + selected_df2['BenaderendVerbruik_VM_2019_Norm'].astype(float) + selected_df2['BenaderendVerbruik_VM_2020_Norm'].astype(float)\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2021_Norm'].astype(float))/5)\r\n",
							"\r\n",
							"selected_df2['Total_AantalToegangspunten'] = selected_df2['AantalToegangspunten_2017'].astype(float)\\\r\n",
							"+ selected_df2['AantalToegangspunten_2018'].astype(float) + selected_df2['AantalToegangspunten_2019'].astype(float) + selected_df2['AantalToegangspunten_2020'].astype(float)\\\r\n",
							"+ selected_df2['AantalToegangspunten_2021'].astype(float)\r\n",
							"\r\n",
							"# Rearrange the columns\r\n",
							"selected_df2 = selected_df2[['Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente', 'WerkelijkVerbruik_RM_2017'\\\r\n",
							", 'BenaderendVerbruik_VM_2017', 'BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017', 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018'\\\r\n",
							", 'BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018', 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'BenaderendVerbruik_VM_2019_Norm'\\\r\n",
							", 'AantalToegangspunten_2019', 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021'\\\r\n",
							",'Gemiddeld_WerkelijkVerbruik','Gemiddeld_BenaderendVerbruik','Gemiddeld_BenaderendVerbruik_Norm','Total_AantalToegangspunten'\\\r\n",
							", 'MeasurementType']] #, 'MeasurementYear', 'MeasurementMonth'"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Checking the column names\r\n",
							"selected_df2.columns"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Selecting the top 5 rows\r\n",
							"selected_df2.head()"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Checking the counts on each file\r\n",
							"print(selected_df1.shape[0]) #Analogue Reading - 2660\r\n",
							"print(selected_df2.shape[0]) #Digital Reading - 7005"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Creating a Group By to check the counts based on month, market and postal code\r\n",
							"grouped_data1 = selected_df1.groupby(['Peildatum', 'Markt', 'Leveringsadres_Postcode'])\r\n",
							"grouped_data2 = selected_df2.groupby(['Peildatum', 'Markt', 'Leveringsadres_Postcode'])\r\n",
							""
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"count_group_by1 = grouped_data1.agg(\r\n",
							"    total_count=('WerkelijkVerbruik_RM_2017', 'count')\r\n",
							")\r\n",
							"count_group_by1.head() #Analogue Reading Group BY\r\n",
							""
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"count_group_by2 = grouped_data2.agg(\r\n",
							"    total_count=('WerkelijkVerbruik_RM_2017', 'count')\r\n",
							")\r\n",
							"count_group_by2.head() #Digital Reading Group By"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Doing union operation to get a single dataframe combining Analogue and Digital measurement data\r\n",
							"df = pd.concat([selected_df2, selected_df1])"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df.head(5)"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.dtypes"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark_df = spark.createDataFrame(df)"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pandas_union'\r\n",
							"write_format=\"delta\"\r\n",
							"partition_by=[\"Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"spark_df\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_by)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Renaming the column names before join in order to avoid ambigious column names after the join\r\n",
							"selected_df1 = selected_df1.add_prefix('AM_')\r\n",
							"selected_df2 = selected_df2.add_prefix('DM_')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Doing a join operation to get a new data frame\r\n",
							"join_df = pd.merge(selected_df2, selected_df1, left_on=['DM_Markt', 'DM_Leveringsadres_Postcode','DM_Leveringsadres_Gemeente','DM_Peildatum'], right_on=['AM_Markt', 'AM_Leveringsadres_Postcode','AM_Leveringsadres_Gemeente','AM_Peildatum'], how='outer')\r\n",
							"\r\n",
							"\r\n",
							"# # Selecting the required columns after the join operation\r\n",
							"# join_df = join_df[['DM_Trekkingsdatum', 'DM_Peildatum', 'DM_Markt', 'DM_Leveringsadres_Postcode', 'DM_Leveringsadres_Gemeente'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2017', 'DM_BenaderendVerbruik_VM_2017', 'DM_BenaderendVerbruik_VM_2017_Norm', 'DM_AantalToegangspunten_2017'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2017', 'AM_BenaderendVerbruik_VM_2017', 'AM_BenaderendVerbruik_VM_2017_Norm', 'AM_AantalToegangspunten_2017'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2018', 'DM_BenaderendVerbruik_VM_2018', 'DM_BenaderendVerbruik_VM_2018_Norm', 'DM_AantalToegangspunten_2018'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2018', 'AM_BenaderendVerbruik_VM_2018', 'AM_BenaderendVerbruik_VM_2018_Norm', 'AM_AantalToegangspunten_2018'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2019', 'DM_BenaderendVerbruik_VM_2019', 'DM_BenaderendVerbruik_VM_2019_Norm', 'DM_AantalToegangspunten_2019'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2019', 'AM_BenaderendVerbruik_VM_2019', 'AM_BenaderendVerbruik_VM_2019_Norm', 'AM_AantalToegangspunten_2019'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2020', 'DM_BenaderendVerbruik_VM_2020', 'DM_BenaderendVerbruik_VM_2020_Norm', 'DM_AantalToegangspunten_2020'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2020', 'AM_BenaderendVerbruik_VM_2020', 'AM_BenaderendVerbruik_VM_2020_Norm', 'AM_AantalToegangspunten_2020'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2021', 'DM_BenaderendVerbruik_VM_2021', 'DM_BenaderendVerbruik_VM_2021_Norm', 'DM_AantalToegangspunten_2021'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2021', 'AM_BenaderendVerbruik_VM_2021', 'AM_BenaderendVerbruik_VM_2021_Norm', 'AM_AantalToegangspunten_2021'\\\r\n",
							"# , 'DM_Gemiddeld_WerkelijkVerbruik','DM_Gemiddeld_BenaderendVerbruik','DM_Gemiddeld_BenaderendVerbruik_Norm','DM_Total_AantalToegangspunten'\\\r\n",
							"# , 'AM_Gemiddeld_WerkelijkVerbruik','AM_Gemiddeld_BenaderendVerbruik','AM_Gemiddeld_BenaderendVerbruik_Norm','AM_Total_AantalToegangspunten'\r\n",
							"# , 'DM_MeasurementType']] #, 'DM_MeasurementYear', 'DM_MeasurementMonth'"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Printing the count of the join data frame\r\n",
							"join_df.shape[0]\r\n",
							""
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Displaying the top 5 rows\r\n",
							"join_df.head(5)"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark_join_df = spark.createDataFrame(join_df)"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pandas_join'\r\n",
							"write_format=\"delta\"\r\n",
							"partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"spark_join_df\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_by)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PySpark_Fact_Dimension_Creation')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load Data From Blob To Synapse SQL Pool",
				"folder": {
					"name": "Master Pipeline Notebooks"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sanzpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "50422a18-e1e4-4081-ac80-2c5cb32fcc4b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/sanzpool",
						"name": "sanzpool",
						"type": "Spark",
						"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sanzpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"# Imporing the libraries\r\n",
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import lit,col,sum,mean,regexp_replace,to_date,count,row_number,unix_timestamp,date_format,quarter,expr,weekofyear\r\n",
							"from pyspark.sql.types import DateType,TimestampType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"\r\n",
							"# Setting the flag to handle the date formats\r\n",
							"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
							"\r\n",
							"# Creating a spark session and connection to blob storage account\r\n",
							"blob_account_name = \"rawdevstorage\"\r\n",
							"blob_container_name = \"output\"\r\n",
							"sc = SparkSession.builder.getOrCreate()\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 179
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Define the path to the Delta table\r\n",
							"delta_table_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pyspark_join'\r\n",
							"\r\n",
							"# Read Delta table into a DataFrame\r\n",
							"reference_table = spark.read.format(\"delta\").load(delta_table_path)"
						],
						"outputs": [],
						"execution_count": 180
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Show the contents of the DataFrame\r\n",
							"display(reference_table.limit(5))"
						],
						"outputs": [],
						"execution_count": 181
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Reading the geo location %%file\r\n",
							"geo_location = spark.read.csv(\"abfss://output@rawdevstorage.dfs.core.windows.net/geo_postcode.csv\", header=True, inferSchema=True)\r\n",
							"\r\n",
							"# Displaying a geo location file\r\n",
							"display(geo_location.limit(5))"
						],
						"outputs": [],
						"execution_count": 182
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Creating a group by for dimensions\r\n",
							"grouped_reference_table_markt_dimension = reference_table.groupBy(\"DM_Markt\")\r\n",
							"markt_dimension1 = grouped_reference_table_markt_dimension.agg(count(\"DM_Trekkingsdatum\"))\r\n",
							"grouped_reference_table_markt_dimension = reference_table.groupBy(\"AM_Markt\")\r\n",
							"markt_dimension2 = grouped_reference_table_markt_dimension.agg(count(\"AM_Trekkingsdatum\"))\r\n",
							"markt_dimension = markt_dimension1.union(markt_dimension2).distinct()\r\n",
							"\r\n",
							"grouped_reference_table_date_dimension_1 = reference_table.groupBy(\"DM_Trekkingsdatum\")\r\n",
							"date_dimension_1 = grouped_reference_table_date_dimension_1.agg(count(\"DM_Trekkingsdatum\"))\r\n",
							"grouped_reference_table_date_dimension_1 = reference_table.groupBy(\"AM_Trekkingsdatum\")\r\n",
							"date_dimension_2 = grouped_reference_table_date_dimension_1.agg(count(\"AM_Trekkingsdatum\"))\r\n",
							"date_dimension_1 = date_dimension_1.union(date_dimension_2).distinct()\r\n",
							"\r\n",
							"grouped_reference_table_date_dimension_2 = reference_table.groupBy(\"DM_Peildatum\")\r\n",
							"date_dimension_2 = grouped_reference_table_date_dimension_2.agg(count(\"DM_Trekkingsdatum\"))\r\n",
							"grouped_reference_table_date_dimension_2 = reference_table.groupBy(\"AM_Peildatum\")\r\n",
							"date_dimension_3 = grouped_reference_table_date_dimension_2.agg(count(\"AM_Trekkingsdatum\"))\r\n",
							"date_dimension_2 = date_dimension_2.union(date_dimension_3).distinct()\r\n",
							"\r\n",
							"grouped_reference_table_geo_location_dimension = reference_table.groupBy(\"DM_Leveringsadres_Postcode\",\"DM_Leveringsadres_Gemeente\")\r\n",
							"geo_location_dimension1 = grouped_reference_table_geo_location_dimension.agg(count(\"DM_Trekkingsdatum\"))\r\n",
							"grouped_reference_table_geo_location_dimension = reference_table.groupBy(\"AM_Leveringsadres_Postcode\",\"AM_Leveringsadres_Gemeente\")\r\n",
							"geo_location_dimension2 = grouped_reference_table_geo_location_dimension.agg(count(\"AM_Trekkingsdatum\"))\r\n",
							"geo_location_dimension = geo_location_dimension1.union(geo_location_dimension2).distinct()\r\n",
							"\r\n",
							"# Exclude the undefined/null value\r\n",
							"markt_dimension = markt_dimension.filter(col(\"DM_Markt\").isNotNull())\r\n",
							"\r\n",
							"date_dimension_1 = date_dimension_1.filter(col(\"DM_Trekkingsdatum\").isNotNull())\r\n",
							"date_dimension_2 = date_dimension_2.filter(col(\"DM_Peildatum\").isNotNull())\r\n",
							"geo_location_dimension = geo_location_dimension.filter(col(\"DM_Leveringsadres_Postcode\").isNotNull())\r\n",
							"geo_location_dimension = geo_location_dimension.filter(col(\"DM_Leveringsadres_Gemeente\").isNotNull())\r\n",
							"\r\n",
							"# Rename columns\r\n",
							"markt_dimension = markt_dimension.withColumnRenamed(\"DM_Markt\", \"Markt_Name\") \\\r\n",
							".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
							"\r\n",
							"date_dimension_1 = date_dimension_1.withColumnRenamed(\"DM_Trekkingsdatum\", \"Date\") \\\r\n",
							".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
							"\r\n",
							"date_dimension_2 = date_dimension_2.withColumnRenamed(\"DM_Peildatum\", \"Date\") \\\r\n",
							".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
							"\r\n",
							"geo_location_dimension = geo_location_dimension.withColumnRenamed(\"DM_Leveringsadres_Postcode\", \"Leveringsadres_Postcode\") \\\r\n",
							".withColumnRenamed(\"DM_Leveringsadres_Gemeente\", \"Leveringsadres_Gemeente\")\\\r\n",
							".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
							"\r\n",
							"# Selecting specific columns\r\n",
							"markt_dimension = markt_dimension.select('Markt_Name').distinct().orderBy(\"Markt_Name\")\r\n",
							"date_dimension_1 = date_dimension_1.select(\"Date\").distinct().orderBy(\"Date\")\r\n",
							"date_dimension_2 = date_dimension_2.select(\"Date\").distinct().orderBy(\"Date\")\r\n",
							"geo_location_dimension = geo_location_dimension.select(\"Leveringsadres_Postcode\",\"Leveringsadres_Gemeente\").distinct().orderBy(\"Leveringsadres_Postcode\")\r\n",
							"\r\n",
							"# joinigng the dataframe to get all the column for geo location dimension\r\n",
							"geo_location_dimension = geo_location.join(geo_location_dimension, geo_location[\"postcode\"] == geo_location_dimension[\"Leveringsadres_Postcode\"], \"inner\")\r\n",
							"\r\n",
							"# Unioning the date dimension and removing the duplicates\r\n",
							"date_dimension = date_dimension_1.union(date_dimension_2).distinct().orderBy(\"Date\")"
						],
						"outputs": [],
						"execution_count": 183
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Define the window specification for the grouping\r\n",
							"markt_dimension_window_spec = Window.orderBy(markt_dimension[\"Markt_Name\"].desc()) #Window.partitionBy(\"DM_Markt\").orderBy(\"DM_Markt\")\r\n",
							"date_dimension_window_spec = Window.orderBy(date_dimension[\"Date\"].desc())"
						],
						"outputs": [],
						"execution_count": 184
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Add an auto-incrementing column to the DataFrame within the group\r\n",
							"markt_dimension = markt_dimension.withColumn(\"Markt_ID\", row_number().over(markt_dimension_window_spec))\r\n",
							"date_dimension = date_dimension.withColumn(\"Date_ID\", row_number().over(date_dimension_window_spec))\r\n",
							"\r\n",
							"# Adding additional columns for the date_dimension_window_spec\r\n",
							"date_dimension = date_dimension.withColumn(\"Day\", date_format(date_dimension[\"Date\"], \"d\").cast(\"integer\"))\r\n",
							"date_dimension = date_dimension.withColumn(\"Month\", date_format(date_dimension[\"Date\"], \"M\").cast(\"integer\"))\r\n",
							"date_dimension = date_dimension.withColumn(\"Year\", date_format(date_dimension[\"Date\"], \"y\").cast(\"integer\"))\r\n",
							"date_dimension = date_dimension.withColumn(\"Quarter\", quarter(date_dimension[\"Date\"]))\r\n",
							"date_dimension = date_dimension.withColumn(\"Day_Of_Year\", expr(\"dayofyear(Date)\"))\r\n",
							"date_dimension = date_dimension.withColumn(\"Week_Number\", weekofyear(date_dimension[\"Date\"]))\r\n",
							"\r\n",
							"# Selecting specific columns and Rearranging the columns\r\n",
							"markt_dimension = markt_dimension.select(\"Markt_ID\", \"Markt_Name\")\r\n",
							"date_dimension = date_dimension.select(\"Date_ID\",\"Date\",\"Day\",\"Month\",\"Year\",\"Quarter\",\"Day_Of_Year\",\"Week_Number\")\r\n",
							"geo_location_dimension = geo_location_dimension.select('dwh_id', 'postcode', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente', 'hoofdgemeente',\r\n",
							"'huidige_hoofdgemeente', 'gewest', 'huidig_gewest', 'provincie', 'huidige_provincie',\r\n",
							"'arrondissement', 'huidig_arrondissement', 'niscode', 'huidige_niscode',)\r\n",
							"\r\n",
							"# Displaying the Markt markt_dimension\r\n",
							"display(markt_dimension.limit(5))\r\n",
							"display(date_dimension.limit(5))\r\n",
							"display(geo_location_dimension.limit(5))"
						],
						"outputs": [],
						"execution_count": 185
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a Fact delta_table_path by joining the reference table with dimensions\r\n",
							"fact_table = reference_table.join(geo_location_dimension, (reference_table[\"DM_Leveringsadres_Postcode\"] == geo_location_dimension[\"Leveringsadres_Postcode\"]) | (reference_table[\"AM_Leveringsadres_Postcode\"] == geo_location_dimension[\"Leveringsadres_Postcode\"]), \"left\")\r\n",
							"fact_table = fact_table.join(markt_dimension, (fact_table[\"DM_Markt\"] == markt_dimension[\"Markt_Name\"]) | (fact_table[\"AM_Markt\"] == markt_dimension[\"Markt_Name\"]), \"left\")\r\n",
							"fact_table = fact_table.join(date_dimension, (fact_table[\"DM_Peildatum\"] == date_dimension[\"Date\"]) | (fact_table[\"AM_Peildatum\"] == date_dimension[\"Date\"]), \"left\")\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"fact_table = fact_table.select( 'Date_ID','Markt_ID','DM_Trekkingsdatum','dwh_id',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2017',\r\n",
							" 'DM_BenaderendVerbruik_VM_2017',\r\n",
							" 'DM_BenaderendVerbruik_VM_2017_Norm',\r\n",
							" 'DM_AantalToegangspunten_2017',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2018',\r\n",
							" 'DM_BenaderendVerbruik_VM_2018',\r\n",
							" 'DM_BenaderendVerbruik_VM_2018_Norm',\r\n",
							" 'DM_AantalToegangspunten_2018',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2019',\r\n",
							" 'DM_BenaderendVerbruik_VM_2019',\r\n",
							" 'DM_BenaderendVerbruik_VM_2019_Norm',\r\n",
							" 'DM_AantalToegangspunten_2019',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2020',\r\n",
							" 'DM_BenaderendVerbruik_VM_2020',\r\n",
							" 'DM_BenaderendVerbruik_VM_2020_Norm',\r\n",
							" 'DM_AantalToegangspunten_2020',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2021',\r\n",
							" 'DM_BenaderendVerbruik_VM_2021',\r\n",
							" 'DM_BenaderendVerbruik_VM_2021_Norm',\r\n",
							" 'DM_AantalToegangspunten_2021',\r\n",
							" 'DM_Gemiddeld_WerkelijkVerbruik',\r\n",
							" 'DM_Gemiddeld_BenaderendVerbruik',\r\n",
							" 'DM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
							" 'DM_Total_AantalToegangspunten',\r\n",
							" 'AM_Trekkingsdatum',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2017',\r\n",
							" 'AM_BenaderendVerbruik_VM_2017',\r\n",
							" 'AM_BenaderendVerbruik_VM_2017_Norm',\r\n",
							" 'AM_AantalToegangspunten_2017',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2018',\r\n",
							" 'AM_BenaderendVerbruik_VM_2018',\r\n",
							" 'AM_BenaderendVerbruik_VM_2018_Norm',\r\n",
							" 'AM_AantalToegangspunten_2018',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2019',\r\n",
							" 'AM_BenaderendVerbruik_VM_2019',\r\n",
							" 'AM_BenaderendVerbruik_VM_2019_Norm',\r\n",
							" 'AM_AantalToegangspunten_2019',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2020',\r\n",
							" 'AM_BenaderendVerbruik_VM_2020',\r\n",
							" 'AM_BenaderendVerbruik_VM_2020_Norm',\r\n",
							" 'AM_AantalToegangspunten_2020',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2021',\r\n",
							" 'AM_BenaderendVerbruik_VM_2021',\r\n",
							" 'AM_BenaderendVerbruik_VM_2021_Norm',\r\n",
							" 'AM_AantalToegangspunten_2021',\r\n",
							" 'AM_Gemiddeld_WerkelijkVerbruik',\r\n",
							" 'AM_Gemiddeld_BenaderendVerbruik',\r\n",
							" 'AM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
							" 'AM_Total_AantalToegangspunten')\r\n",
							"\r\n",
							"# Renaming the columns\r\n",
							"fact_table = fact_table.withColumnRenamed(\"Date_ID\", \"Peildatum_ID\")\\\r\n",
							".withColumnRenamed(\"dwh_id\", \"Geo_Location_ID\")\\\r\n",
							"\r\n",
							"# Making more Join Operation\r\n",
							"fact_table = fact_table.join(date_dimension, (fact_table[\"DM_Trekkingsdatum\"] == date_dimension[\"Date\"]) | (fact_table[\"AM_Trekkingsdatum\"] == date_dimension[\"Date\"]), \"left\")\r\n",
							"\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"fact_table = fact_table.select( 'Peildatum_ID','Date_ID',\r\n",
							" 'Markt_ID',\r\n",
							" 'Geo_Location_ID',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2017',\r\n",
							" 'DM_BenaderendVerbruik_VM_2017',\r\n",
							" 'DM_BenaderendVerbruik_VM_2017_Norm',\r\n",
							" 'DM_AantalToegangspunten_2017',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2018',\r\n",
							" 'DM_BenaderendVerbruik_VM_2018',\r\n",
							" 'DM_BenaderendVerbruik_VM_2018_Norm',\r\n",
							" 'DM_AantalToegangspunten_2018',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2019',\r\n",
							" 'DM_BenaderendVerbruik_VM_2019',\r\n",
							" 'DM_BenaderendVerbruik_VM_2019_Norm',\r\n",
							" 'DM_AantalToegangspunten_2019',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2020',\r\n",
							" 'DM_BenaderendVerbruik_VM_2020',\r\n",
							" 'DM_BenaderendVerbruik_VM_2020_Norm',\r\n",
							" 'DM_AantalToegangspunten_2020',\r\n",
							" 'DM_WerkelijkVerbruik_RM_2021',\r\n",
							" 'DM_BenaderendVerbruik_VM_2021',\r\n",
							" 'DM_BenaderendVerbruik_VM_2021_Norm',\r\n",
							" 'DM_AantalToegangspunten_2021',\r\n",
							" 'DM_Gemiddeld_WerkelijkVerbruik',\r\n",
							" 'DM_Gemiddeld_BenaderendVerbruik',\r\n",
							" 'DM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
							" 'DM_Total_AantalToegangspunten',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2017',\r\n",
							" 'AM_BenaderendVerbruik_VM_2017',\r\n",
							" 'AM_BenaderendVerbruik_VM_2017_Norm',\r\n",
							" 'AM_AantalToegangspunten_2017',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2018',\r\n",
							" 'AM_BenaderendVerbruik_VM_2018',\r\n",
							" 'AM_BenaderendVerbruik_VM_2018_Norm',\r\n",
							" 'AM_AantalToegangspunten_2018',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2019',\r\n",
							" 'AM_BenaderendVerbruik_VM_2019',\r\n",
							" 'AM_BenaderendVerbruik_VM_2019_Norm',\r\n",
							" 'AM_AantalToegangspunten_2019',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2020',\r\n",
							" 'AM_BenaderendVerbruik_VM_2020',\r\n",
							" 'AM_BenaderendVerbruik_VM_2020_Norm',\r\n",
							" 'AM_AantalToegangspunten_2020',\r\n",
							" 'AM_WerkelijkVerbruik_RM_2021',\r\n",
							" 'AM_BenaderendVerbruik_VM_2021',\r\n",
							" 'AM_BenaderendVerbruik_VM_2021_Norm',\r\n",
							" 'AM_AantalToegangspunten_2021',\r\n",
							" 'AM_Gemiddeld_WerkelijkVerbruik',\r\n",
							" 'AM_Gemiddeld_BenaderendVerbruik',\r\n",
							" 'AM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
							" 'AM_Total_AantalToegangspunten')\r\n",
							"\r\n",
							" \r\n",
							"# Renaming the columns\r\n",
							"fact_table = fact_table.withColumnRenamed(\"Date_ID\", \"Trekkingsdatum_ID\")"
						],
						"outputs": [],
						"execution_count": 186
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(fact_table.limit(5))"
						],
						"outputs": [],
						"execution_count": 187
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Writing the markt dimension to delta file\r\n",
							"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Markt_Dimension'\r\n",
							"write_format=\"delta\"\r\n",
							"#partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = \"overwrite\" #append\r\n",
							"\r\n",
							"markt_dimension\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)\r\n",
							"\r\n",
							"#.partitionBy(partition_by)\\"
						],
						"outputs": [],
						"execution_count": 188
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Writing the date dimension to delta file\r\n",
							"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Date_Dimension'\r\n",
							"write_format=\"delta\"\r\n",
							"#partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = \"overwrite\" #append\r\n",
							"\r\n",
							"date_dimension\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)\r\n",
							"\r\n",
							"#.partitionBy(partition_by)\\"
						],
						"outputs": [],
						"execution_count": 189
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Writing the geo location dimension to delta file\r\n",
							"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Geo_Location_Dimension'\r\n",
							"write_format=\"delta\"\r\n",
							"#partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = \"overwrite\" #append\r\n",
							"\r\n",
							"geo_location_dimension\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)\r\n",
							"\r\n",
							"#.partitionBy(partition_by)\\"
						],
						"outputs": [],
						"execution_count": 190
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Writing the fact table to delta file\r\n",
							"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Fact_Table'\r\n",
							"write_format=\"delta\"\r\n",
							"#partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = \"overwrite\" #append\r\n",
							"\r\n",
							"fact_table\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)\r\n",
							"\r\n",
							"#.partitionBy(partition_by)\\"
						],
						"outputs": [],
						"execution_count": 191
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PySpark_Load_Data_From_Blob_To_Synapse_SQL_Pool')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Load Data From Blob To Synapse SQL Pool",
				"folder": {
					"name": "Master Pipeline Notebooks"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "devpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ef576d34-47f5-42fc-9641-04157e4cc0b6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/devpool",
						"name": "devpool",
						"type": "Spark",
						"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/devpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Getiing the parameter value from the pipeline \r\n",
							"FolderName = \"2023_02\"\r\n",
							"Mode = \"overwrite\""
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Using the parameter value creating a new variables to use while reading the file\r\n",
							"FolderName_Without_Separator = FolderName.replace(\"_\", \"\")\r\n",
							"year = FolderName.split('_')[0]\r\n",
							"month = FolderName.split('_')[1]"
						],
						"outputs": [],
						"execution_count": 117
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"# Creating a spark session and connection to blob storage account\r\n",
							"blob_account_name = \"rawdevstorage\"\r\n",
							"blob_container_name = \"rawdata\"\r\n",
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import lit,col,sum,mean,regexp_replace,to_date,coalesce,expr\r\n",
							"from pyspark.sql.types import DateType\r\n",
							"\r\n",
							"sc = SparkSession.builder.getOrCreate()\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
							"spark.conf.set(\r\n",
							"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
							"    blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 118
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Set this flag to deal with different date format issues\r\n",
							"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")"
						],
						"outputs": [],
						"execution_count": 119
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex for AMR\r\n",
							"import re\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_AMR_GEMEENTE_%s.csv' % (FolderName, FolderName_Without_Separator)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))"
						],
						"outputs": [],
						"execution_count": 120
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Reading the first File (Analogue Reading File)\r\n",
							"FileName = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_AMR_GEMEENTE_%s.csv' % (FolderName,FolderName_Without_Separator)\r\n",
							"df1 = spark.read.load(FileName, format='csv', header=True,delimiter=amr_delimiter_type,inferSchema=True)\r\n",
							"\r\n",
							"# Remove duplicates\r\n",
							"df1 = df1.dropDuplicates()\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"selected_df1 = df1.select('Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							", 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017', 'AantalToegangspunten_2017'\\\r\n",
							", 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018', 'AantalToegangspunten_2018'\\\r\n",
							", 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'AantalToegangspunten_2019'\\\r\n",
							", 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'AantalToegangspunten_2021')\r\n",
							"\r\n",
							"# Adding the additional calculated/custom columns\r\n",
							"selected_df1 = selected_df1.withColumn(\"MeasurementType\", lit(\"Digital\"))\r\n",
							"#selected_df1 = selected_df1.withColumn(\"MeasurementYear\", lit(year))\r\n",
							"#selected_df1 = selected_df1.withColumn(\"MeasurementMonth\", lit(month))"
						],
						"outputs": [],
						"execution_count": 121
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Convert the string column to date data type, regardless of the date format\r\n",
							"date_formats = [\"dd/MMM/yy\", \"MM/dd/yy\", \"dd-MMM-yy\",\"dd/MMM/yyyy\"]\r\n",
							"\r\n",
							"parsed_date = coalesce(*[expr(\"to_date(Peildatum, '{0}')\".format(date_format)).cast(\"date\") for date_format in date_formats])\r\n",
							"\r\n",
							"# Add the parsed date as a new column in the DataFrame\r\n",
							"selected_df1 = selected_df1.withColumn(\"MeasurementDate\", parsed_date)\r\n",
							"\r\n",
							"#-------------- Old Code begins -----------------------\r\n",
							"# selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"dd/MMM/yy\").cast(DateType()))\r\n",
							"# # Select the first row of the DataFrame and extract the last column value\r\n",
							"# last_value = selected_df1.first()[-1]\r\n",
							"# # Print the last column value to the console\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df1 = selected_df1.drop(\"MeasurementDate\")\r\n",
							"#     selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"MM/dd/yy\").cast(DateType()))\r\n",
							"# last_value = selected_df1.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df1 = selected_df1.drop(\"MeasurementDate\")\r\n",
							"#     selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"dd-MMM-yy\").cast(DateType()))\r\n",
							"# last_value = selected_df1.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df1 = selected_df1.drop(\"MeasurementDate\")\r\n",
							"#     selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"dd/MMM/yyyy\").cast(DateType()))\r\n",
							"#-------------- Old Code ends -----------------------\r\n",
							"\r\n",
							"# Drop the original col2 column\r\n",
							"selected_df1 = selected_df1.drop(\"Peildatum\")\r\n",
							"\r\n",
							"# Rename the new_col column to col2\r\n",
							"selected_df1 = selected_df1.withColumnRenamed(\"MeasurementDate\", \"Peildatum\")"
						],
						"outputs": [],
						"execution_count": 122
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Convert the string column to date data type, regardless of the date format\r\n",
							"date_formats = [\"dd/MMM/yy\", \"MM/dd/yy\", \"dd-MMM-yy\",\"dd/MMM/yyyy\"]\r\n",
							"\r\n",
							"parsed_date = coalesce(*[expr(\"to_date(Trekkingsdatum, '{0}')\".format(date_format)).cast(\"date\") for date_format in date_formats])\r\n",
							"\r\n",
							"# Add the parsed date as a new column in the DataFrame\r\n",
							"selected_df1 = selected_df1.withColumn(\"MeasurementDate\", parsed_date)\r\n",
							"\r\n",
							"#-------------- Old Code begins -----------------------\r\n",
							"# selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"dd/MMM/yy\").cast(DateType()))\r\n",
							"# # Select the first row of the DataFrame and extract the last column value\r\n",
							"# last_value = selected_df1.first()[-1]\r\n",
							"# # Print the last column value to the console\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df1 = selected_df1.drop(\"MeasurementDate\")\r\n",
							"#     selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"MM/dd/yy\").cast(DateType()))\r\n",
							"# last_value = selected_df1.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df1 = selected_df1.drop(\"MeasurementDate\")\r\n",
							"#     selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"dd-MMM-yy\").cast(DateType()))\r\n",
							"# last_value = selected_df1.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df1 = selected_df1.drop(\"MeasurementDate\")\r\n",
							"#     selected_df1 = selected_df1.withColumn(\"MeasurementDate\", to_date(selected_df1[\"Peildatum\"], \"dd/MMM/yyyy\").cast(DateType()))\r\n",
							"#-------------- Old Code ends -----------------------\r\n",
							"\r\n",
							"# Drop the original col2 column\r\n",
							"selected_df1 = selected_df1.drop(\"Trekkingsdatum\")\r\n",
							"\r\n",
							"# Rename the new_col column to col2\r\n",
							"selected_df1 = selected_df1.withColumnRenamed(\"MeasurementDate\", \"Trekkingsdatum\")"
						],
						"outputs": [],
						"execution_count": 123
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Adding the additional calculated/custom columns\r\n",
							"selected_df1 = selected_df1.withColumn(\"BenaderendVerbruik_VM_2017_Norm\", col(\"BenaderendVerbruik_VM_2017\"))\r\n",
							"selected_df1 = selected_df1.withColumn(\"BenaderendVerbruik_VM_2018_Norm\", col(\"BenaderendVerbruik_VM_2018\"))\r\n",
							"selected_df1 = selected_df1.withColumn(\"BenaderendVerbruik_VM_2019_Norm\", col(\"BenaderendVerbruik_VM_2019\"))\r\n",
							"selected_df1 = selected_df1.withColumn(\"BenaderendVerbruik_VM_2020_Norm\", col(\"BenaderendVerbruik_VM_2020\"))\r\n",
							"selected_df1 = selected_df1.withColumn(\"BenaderendVerbruik_VM_2021_Norm\", col(\"BenaderendVerbruik_VM_2021\"))\r\n",
							"\r\n",
							"selected_df1 = selected_df1.withColumn('WerkelijkVerbruik_RM_2017', regexp_replace(selected_df1['WerkelijkVerbruik_RM_2017'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('WerkelijkVerbruik_RM_2018', regexp_replace(selected_df1['WerkelijkVerbruik_RM_2018'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('WerkelijkVerbruik_RM_2019', regexp_replace(selected_df1['WerkelijkVerbruik_RM_2019'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('WerkelijkVerbruik_RM_2020', regexp_replace(selected_df1['WerkelijkVerbruik_RM_2020'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('WerkelijkVerbruik_RM_2021', regexp_replace(selected_df1['WerkelijkVerbruik_RM_2021'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('Gemiddeld_WerkelijkVerbruik', ((selected_df1['WerkelijkVerbruik_RM_2017']\\\r\n",
							"+ selected_df1['WerkelijkVerbruik_RM_2018'] + selected_df1['WerkelijkVerbruik_RM_2019'] + selected_df1['WerkelijkVerbruik_RM_2020']\\\r\n",
							"+ selected_df1['WerkelijkVerbruik_RM_2021'])/5))\r\n",
							"\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2017', regexp_replace(selected_df1['BenaderendVerbruik_VM_2017'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2018', regexp_replace(selected_df1['BenaderendVerbruik_VM_2018'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2019', regexp_replace(selected_df1['BenaderendVerbruik_VM_2019'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2020', regexp_replace(selected_df1['BenaderendVerbruik_VM_2020'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2021', regexp_replace(selected_df1['BenaderendVerbruik_VM_2021'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('Gemiddeld_BenaderendVerbruik', ((selected_df1['BenaderendVerbruik_VM_2017']\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2018'] + selected_df1['BenaderendVerbruik_VM_2019'] + selected_df1['BenaderendVerbruik_VM_2020']\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2021'])/5))\r\n",
							"\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2017_Norm', regexp_replace(selected_df1['BenaderendVerbruik_VM_2017_Norm'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2018_Norm', regexp_replace(selected_df1['BenaderendVerbruik_VM_2018_Norm'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2019_Norm', regexp_replace(selected_df1['BenaderendVerbruik_VM_2019_Norm'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2020_Norm', regexp_replace(selected_df1['BenaderendVerbruik_VM_2020_Norm'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('BenaderendVerbruik_VM_2021_Norm', regexp_replace(selected_df1['BenaderendVerbruik_VM_2021_Norm'], ',', '.'))\r\n",
							"selected_df1 = selected_df1.withColumn('Gemiddeld_BenaderendVerbruik_Norm', ((selected_df1['BenaderendVerbruik_VM_2017_Norm']\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2018_Norm'] + selected_df1['BenaderendVerbruik_VM_2019_Norm'] + selected_df1['BenaderendVerbruik_VM_2020_Norm']\\\r\n",
							"+ selected_df1['BenaderendVerbruik_VM_2021_Norm'])/5))\r\n",
							"\r\n",
							"selected_df1 = selected_df1.withColumn('Total_AantalToegangspunten', selected_df1['AantalToegangspunten_2017']\\\r\n",
							"+ selected_df1['AantalToegangspunten_2018'] + selected_df1['AantalToegangspunten_2019'] + selected_df1['AantalToegangspunten_2020']\\\r\n",
							"+ selected_df1['AantalToegangspunten_2021'])\r\n",
							"\r\n",
							"\r\n",
							"# Rearrange the columns\r\n",
							"selected_df1 = selected_df1.select('Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente', 'WerkelijkVerbruik_RM_2017'\\\r\n",
							", 'BenaderendVerbruik_VM_2017', 'BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017', 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018'\\\r\n",
							", 'BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018', 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'BenaderendVerbruik_VM_2019_Norm'\\\r\n",
							", 'AantalToegangspunten_2019', 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021'\\\r\n",
							",'Gemiddeld_WerkelijkVerbruik','Gemiddeld_BenaderendVerbruik','Gemiddeld_BenaderendVerbruik_Norm','Total_AantalToegangspunten'\\\r\n",
							", 'MeasurementType') #, 'MeasurementYear', 'MeasurementMonth'"
						],
						"outputs": [],
						"execution_count": 124
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Checking the column name\r\n",
							"print(selected_df1.columns)\r\n",
							"\r\n",
							"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
							"\r\n",
							"# Displaying the top 5 rows\r\n",
							"display(selected_df1.limit(5))"
						],
						"outputs": [],
						"execution_count": 125
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex for DM\r\n",
							"import re\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_DM_GEMEENTE_%s.csv' % (FolderName, FolderName_Without_Separator)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))"
						],
						"outputs": [],
						"execution_count": 71
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Reading the second File (Digital Reading File)\r\n",
							"FileName = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_DM_GEMEENTE_%s.csv' % (FolderName,FolderName_Without_Separator)\r\n",
							"df2 = spark.read.load(FileName, format='csv', header=True,delimiter=amr_delimiter_type,inferSchema=True)\r\n",
							"\r\n",
							"# Remove duplicates\r\n",
							"df2 = df2.dropDuplicates()\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"selected_df2 = df2.select('Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente'\\\r\n",
							", 'WerkelijkVerbruik_RM_2017', 'BenaderendVerbruik_VM_2017', 'BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017'\\\r\n",
							", 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018', 'BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018'\\\r\n",
							", 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'BenaderendVerbruik_VM_2019_Norm', 'AantalToegangspunten_2019'\\\r\n",
							", 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021')\r\n",
							"\r\n",
							"# Adding the additional calculated/custom columns\r\n",
							"selected_df2 = selected_df2.withColumn(\"MeasurementType\", lit(\"Digital\"))\r\n",
							"#selected_df2 = selected_df2.withColumn(\"MeasurementYear\", lit(year))\r\n",
							"#selected_df2 = selected_df2.withColumn(\"MeasurementMonth\", lit(month))"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Convert the string column to date data type, regardless of the date format\r\n",
							"date_formats = [\"dd/MMM/yy\", \"MM/dd/yy\", \"dd-MMM-yy\",\"dd/MMM/yyyy\"]\r\n",
							"\r\n",
							"parsed_date = coalesce(*[expr(\"to_date(Peildatum, '{0}')\".format(date_format)).cast(\"date\") for date_format in date_formats])\r\n",
							"\r\n",
							"# Add the parsed date as a new column in the DataFrame\r\n",
							"selected_df2 = selected_df2.withColumn(\"MeasurementDate\", parsed_date)\r\n",
							"\r\n",
							"#-------------- Old Code begins -----------------------\r\n",
							"# selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"dd/MMM/yy\").cast(DateType()))\r\n",
							"# # Select the first row of the DataFrame and extract the last column value\r\n",
							"# last_value = selected_df2.first()[-1]\r\n",
							"# # Print the last column value to the console\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df2 = selected_df2.drop(\"MeasurementDate\")\r\n",
							"#     selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"MM/dd/yy\").cast(DateType()))\r\n",
							"# last_value = selected_df2.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df2 = selected_df2.drop(\"MeasurementDate\")\r\n",
							"#     selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"dd-MMM-yy\").cast(DateType()))\r\n",
							"# last_value = selected_df2.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df2 = selected_df2.drop(\"MeasurementDate\")\r\n",
							"#     selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"dd/MMM/yyyy\").cast(DateType()))\r\n",
							"#-------------- Old Code ends -----------------------\r\n",
							"\r\n",
							"# Drop the original col2 column\r\n",
							"selected_df2 = selected_df2.drop(\"Peildatum\")\r\n",
							"\r\n",
							"# Rename the new_col column to col2\r\n",
							"selected_df2 = selected_df2.withColumnRenamed(\"MeasurementDate\", \"Peildatum\")"
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Convert the string column to date data type, regardless of the date format\r\n",
							"date_formats = [\"dd/MMM/yy\", \"MM/dd/yy\", \"dd-MMM-yy\",\"dd/MMM/yyyy\"]\r\n",
							"\r\n",
							"parsed_date = coalesce(*[expr(\"to_date(Trekkingsdatum, '{0}')\".format(date_format)).cast(\"date\") for date_format in date_formats])\r\n",
							"\r\n",
							"# Add the parsed date as a new column in the DataFrame\r\n",
							"selected_df2 = selected_df2.withColumn(\"MeasurementDate\", parsed_date)\r\n",
							"\r\n",
							"#-------------- Old Code begins -----------------------\r\n",
							"# selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"dd/MMM/yy\").cast(DateType()))\r\n",
							"# # Select the first row of the DataFrame and extract the last column value\r\n",
							"# last_value = selected_df2.first()[-1]\r\n",
							"# # Print the last column value to the console\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df2 = selected_df2.drop(\"MeasurementDate\")\r\n",
							"#     selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"MM/dd/yy\").cast(DateType()))\r\n",
							"# last_value = selected_df2.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df2 = selected_df2.drop(\"MeasurementDate\")\r\n",
							"#     selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"dd-MMM-yy\").cast(DateType()))\r\n",
							"# last_value = selected_df2.first()[-1]\r\n",
							"# if last_value==None:\r\n",
							"#     selected_df2 = selected_df2.drop(\"MeasurementDate\")\r\n",
							"#     selected_df2 = selected_df2.withColumn(\"MeasurementDate\", to_date(selected_df2[\"Peildatum\"], \"dd/MMM/yyyy\").cast(DateType()))\r\n",
							"#-------------- Old Code ends -----------------------\r\n",
							"\r\n",
							"# Drop the original col2 column\r\n",
							"selected_df2 = selected_df2.drop(\"Trekkingsdatum\")\r\n",
							"\r\n",
							"# Rename the new_col column to col2\r\n",
							"selected_df2 = selected_df2.withColumnRenamed(\"MeasurementDate\", \"Trekkingsdatum\")"
						],
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false,
							"tags": []
						},
						"source": [
							"# Adding the additional calculated/custom columns\r\n",
							"selected_df2 = selected_df2.withColumn('WerkelijkVerbruik_RM_2017', regexp_replace(selected_df2['WerkelijkVerbruik_RM_2017'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('WerkelijkVerbruik_RM_2018', regexp_replace(selected_df2['WerkelijkVerbruik_RM_2018'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('WerkelijkVerbruik_RM_2019', regexp_replace(selected_df2['WerkelijkVerbruik_RM_2019'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('WerkelijkVerbruik_RM_2020', regexp_replace(selected_df2['WerkelijkVerbruik_RM_2020'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('WerkelijkVerbruik_RM_2021', regexp_replace(selected_df2['WerkelijkVerbruik_RM_2021'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('Gemiddeld_WerkelijkVerbruik', ((selected_df2['WerkelijkVerbruik_RM_2017']\\\r\n",
							"+ selected_df2['WerkelijkVerbruik_RM_2018'] + selected_df2['WerkelijkVerbruik_RM_2019'] + selected_df2['WerkelijkVerbruik_RM_2020']\\\r\n",
							"+ selected_df2['WerkelijkVerbruik_RM_2021'])/5))\r\n",
							"\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2017', regexp_replace(selected_df2['BenaderendVerbruik_VM_2017'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2018', regexp_replace(selected_df2['BenaderendVerbruik_VM_2018'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2019', regexp_replace(selected_df2['BenaderendVerbruik_VM_2019'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2020', regexp_replace(selected_df2['BenaderendVerbruik_VM_2020'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2021', regexp_replace(selected_df2['BenaderendVerbruik_VM_2021'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('Gemiddeld_BenaderendVerbruik', ((selected_df2['BenaderendVerbruik_VM_2017']\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2018'] + selected_df2['BenaderendVerbruik_VM_2019'] + selected_df2['BenaderendVerbruik_VM_2020']\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2021'])/5))\r\n",
							"\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2017_Norm', regexp_replace(selected_df2['BenaderendVerbruik_VM_2017_Norm'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2018_Norm', regexp_replace(selected_df2['BenaderendVerbruik_VM_2018_Norm'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2019_Norm', regexp_replace(selected_df2['BenaderendVerbruik_VM_2019_Norm'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2020_Norm', regexp_replace(selected_df2['BenaderendVerbruik_VM_2020_Norm'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('BenaderendVerbruik_VM_2021_Norm', regexp_replace(selected_df2['BenaderendVerbruik_VM_2021_Norm'], ',', '.'))\r\n",
							"selected_df2 = selected_df2.withColumn('Gemiddeld_BenaderendVerbruik_Norm', ((selected_df2['BenaderendVerbruik_VM_2017_Norm']\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2018_Norm'] + selected_df2['BenaderendVerbruik_VM_2019_Norm'] + selected_df2['BenaderendVerbruik_VM_2020_Norm']\\\r\n",
							"+ selected_df2['BenaderendVerbruik_VM_2021_Norm'])/5))\r\n",
							"\r\n",
							"selected_df2 = selected_df2.withColumn('Total_AantalToegangspunten', selected_df2['AantalToegangspunten_2017']\\\r\n",
							"+ selected_df2['AantalToegangspunten_2018'] + selected_df2['AantalToegangspunten_2019'] + selected_df2['AantalToegangspunten_2020']\\\r\n",
							"+ selected_df2['AantalToegangspunten_2021'])\r\n",
							"\r\n",
							"\r\n",
							"# Rearrange the columns\r\n",
							"selected_df2 = selected_df2.select('Trekkingsdatum', 'Peildatum', 'Markt', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente', 'WerkelijkVerbruik_RM_2017'\\\r\n",
							", 'BenaderendVerbruik_VM_2017', 'BenaderendVerbruik_VM_2017_Norm', 'AantalToegangspunten_2017', 'WerkelijkVerbruik_RM_2018', 'BenaderendVerbruik_VM_2018'\\\r\n",
							", 'BenaderendVerbruik_VM_2018_Norm', 'AantalToegangspunten_2018', 'WerkelijkVerbruik_RM_2019', 'BenaderendVerbruik_VM_2019', 'BenaderendVerbruik_VM_2019_Norm'\\\r\n",
							", 'AantalToegangspunten_2019', 'WerkelijkVerbruik_RM_2020', 'BenaderendVerbruik_VM_2020', 'BenaderendVerbruik_VM_2020_Norm', 'AantalToegangspunten_2020'\\\r\n",
							", 'WerkelijkVerbruik_RM_2021', 'BenaderendVerbruik_VM_2021', 'BenaderendVerbruik_VM_2021_Norm', 'AantalToegangspunten_2021'\\\r\n",
							",'Gemiddeld_WerkelijkVerbruik','Gemiddeld_BenaderendVerbruik','Gemiddeld_BenaderendVerbruik_Norm','Total_AantalToegangspunten'\\\r\n",
							", 'MeasurementType') #, 'MeasurementYear', 'MeasurementMonth'"
						],
						"outputs": [],
						"execution_count": 75
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Checking the column name\r\n",
							"print(selected_df2.columns)\r\n",
							"\r\n",
							"# Displaying the top 5 rows\r\n",
							"display(selected_df2.limit(5))"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Checking the counts on each data frame\r\n",
							"print(selected_df1.count()) #Analogue Reading - 2660\r\n",
							"print(selected_df2.count()) #Digital Reading - 7005\r\n",
							""
						],
						"outputs": [],
						"execution_count": 77
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Creating a Group By to check the counts based on month, market and postal code\r\n",
							"from pyspark.sql.functions import count\r\n",
							"grouped_data1 = selected_df1.groupBy('Peildatum', 'Markt', 'Leveringsadres_Postcode')\r\n",
							"grouped_data2 = selected_df2.groupBy('Peildatum', 'Markt', 'Leveringsadres_Postcode')\r\n",
							"count_group_by1 = grouped_data1.agg(count(\"WerkelijkVerbruik_RM_2017\"))\r\n",
							"count_group_by1.show() #Analogue Reading Group BY\r\n",
							"count_group_by2 = grouped_data2.agg(count(\"WerkelijkVerbruik_RM_2017\"))\r\n",
							"count_group_by2.show() #Digital Reading Group By"
						],
						"outputs": [],
						"execution_count": 78
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Doing union operation to get a single dataframe combining Analogue and Digital measurement data\r\n",
							"df = selected_df2.unionAll(selected_df1)"
						],
						"outputs": [],
						"execution_count": 79
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Displaying the top 5 rows\r\n",
							"display(df.limit(5))\r\n",
							"\r\n",
							"# Checking the datatypes of the column\r\n",
							"df.dtypes"
						],
						"outputs": [],
						"execution_count": 80
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pyspark_union'\r\n",
							"write_format=\"delta\"\r\n",
							"partition_by=[\"Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"df\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_by)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)"
						],
						"outputs": [],
						"execution_count": 81
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Renaming the column names before join in order to avoid ambigious column names after the join\r\n",
							"new_column_names = [\"AM_\" + col_name for col_name in df.columns]\r\n",
							"selected_df1 = selected_df1.select([col(col_name).alias(new_col_name) for col_name, new_col_name in zip(df.columns, new_column_names)])\r\n",
							"new_column_names = [\"DM_\" + col_name for col_name in df.columns]\r\n",
							"selected_df2 = selected_df2.select([col(col_name).alias(new_col_name) for col_name, new_col_name in zip(df.columns, new_column_names)])"
						],
						"outputs": [],
						"execution_count": 82
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Doing a join operation to get a new data frame\r\n",
							"join_df = selected_df2.join(selected_df1, [selected_df1.AM_Markt == selected_df2.DM_Markt, selected_df1.AM_Leveringsadres_Postcode == selected_df2.DM_Leveringsadres_Postcode\\\r\n",
							", selected_df1.AM_Leveringsadres_Gemeente == selected_df2.DM_Leveringsadres_Gemeente, selected_df1.AM_Peildatum == selected_df2.DM_Peildatum],how='outer')\r\n",
							"\r\n",
							"# Selecting the required columns after the join operation\r\n",
							"# join_df = join_df.select('DM_Trekkingsdatum', 'DM_Peildatum', 'DM_Markt', 'DM_Leveringsadres_Postcode', 'DM_Leveringsadres_Gemeente'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2017', 'DM_BenaderendVerbruik_VM_2017', 'DM_BenaderendVerbruik_VM_2017_Norm', 'DM_AantalToegangspunten_2017'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2017', 'AM_BenaderendVerbruik_VM_2017', 'AM_BenaderendVerbruik_VM_2017_Norm', 'AM_AantalToegangspunten_2017'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2018', 'DM_BenaderendVerbruik_VM_2018', 'DM_BenaderendVerbruik_VM_2018_Norm', 'DM_AantalToegangspunten_2018'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2018', 'AM_BenaderendVerbruik_VM_2018', 'AM_BenaderendVerbruik_VM_2018_Norm', 'AM_AantalToegangspunten_2018'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2019', 'DM_BenaderendVerbruik_VM_2019', 'DM_BenaderendVerbruik_VM_2019_Norm', 'DM_AantalToegangspunten_2019'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2019', 'AM_BenaderendVerbruik_VM_2019', 'AM_BenaderendVerbruik_VM_2019_Norm', 'AM_AantalToegangspunten_2019'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2020', 'DM_BenaderendVerbruik_VM_2020', 'DM_BenaderendVerbruik_VM_2020_Norm', 'DM_AantalToegangspunten_2020'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2020', 'AM_BenaderendVerbruik_VM_2020', 'AM_BenaderendVerbruik_VM_2020_Norm', 'AM_AantalToegangspunten_2020'\\\r\n",
							"# , 'DM_WerkelijkVerbruik_RM_2021', 'DM_BenaderendVerbruik_VM_2021', 'DM_BenaderendVerbruik_VM_2021_Norm', 'DM_AantalToegangspunten_2021'\\\r\n",
							"# , 'AM_WerkelijkVerbruik_RM_2021', 'AM_BenaderendVerbruik_VM_2021', 'AM_BenaderendVerbruik_VM_2021_Norm', 'AM_AantalToegangspunten_2021'\\\r\n",
							"# , 'DM_Gemiddeld_WerkelijkVerbruik','DM_Gemiddeld_BenaderendVerbruik','DM_Gemiddeld_BenaderendVerbruik_Norm','DM_Total_AantalToegangspunten'\\\r\n",
							"# , 'AM_Gemiddeld_WerkelijkVerbruik','AM_Gemiddeld_BenaderendVerbruik','AM_Gemiddeld_BenaderendVerbruik_Norm','AM_Total_AantalToegangspunten'\r\n",
							"# , 'DM_MeasurementType') #, 'DM_MeasurementYear', 'DM_MeasurementMonth'"
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Printing the count of the join data frame\r\n",
							"print(join_df.count())\r\n",
							"\r\n",
							"# Displaying the top 5 rows\r\n",
							"display(join_df.limit(5))"
						],
						"outputs": [],
						"execution_count": 84
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pyspark_join'\r\n",
							"write_format=\"delta\"\r\n",
							"partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"join_df\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_by)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)"
						],
						"outputs": [],
						"execution_count": 85
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark Structured Streaming and Delta Tables')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ac37dcba-e05f-4bbc-971f-fc78f163d89c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Spark Structured Streaming and Delta Tables\n",
							"\n",
							"Spark provides support for streaming data through *Spark Structured Streaming* and extends this support through *delta tables* that can be targets (*sinks*) or *sources* of streaming data.\n",
							"\n",
							"In this exercise, you'll use Spark to ingest a stream of data from a folder of JSON files that consists of simulated status messages from devices. In a real scenario, the data could come from some other real-time source, such as a Kafka queue or an Azure Event Hub.\n",
							"\n",
							"## Create a folder for the incoming stream of data\n",
							"\n",
							"1. Ensure this notebook is attached to your Spark pool (using this **Attach to** drop-down list above).\n",
							"2. Run the cell below to create a folder named **data** to which the simulated device data will be written.\n",
							"\n",
							"    > **Note**: The first cell may take some time to run because the Spark pool must be started.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\n",
							"\n",
							"# Create a folder\n",
							"inputPath = '/data/'\n",
							"mssparkutils.fs.mkdirs(inputPath)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Use Spark Structured Streaming to query a stream of data\n",
							"\n",
							"1. Run the cell below to create a streaming dataframe that reads data from the folder based on a JSON schema that includes the name of the device and its status."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"# Create a stream that reads data from the folder, using a JSON schema\n",
							"jsonSchema = StructType([\n",
							"  StructField(\"device\", StringType(), False),\n",
							"  StructField(\"status\", StringType(), False)\n",
							"])\n",
							"\n",
							"fileDF = spark.readStream.schema(jsonSchema).option(\"maxFilesPerTrigger\", 1).json(inputPath)\n",
							"\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"2. Wait for the cell above to complete.\n",
							"3. When the streaming dataframe has been created, you can apply a transformation query to aggregate the data and write the results to an output stream. Run the following code to filter the incoming stream for errors in the device data, and count the number of errors per device."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"countDF = fileDF.filter(\"status == 'error'\").groupBy(\"device\").count()\n",
							"query = countDF.writeStream.format(\"memory\").queryName(\"counts\").outputMode(\"complete\").start()\n",
							"print('Streaming query started.')"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"4. The query output is streamed to an in-memory table. Run the cell below to use SQL to query this table and veiw the number of errors per device."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"microsoft": {
								"language": "sparksql"
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"select * from counts\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"5. Note that the query returns no data, because we haven't written any device status data there yet.\n",
							"6. Let's fix that by writing some status event data from a couple of simulated devices."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"device_data = '''{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev2\",\"status\":\"error\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"error\"}\n",
							"{\"device\":\"Dev2\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev2\",\"status\":\"error\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}'''\n",
							"\n",
							"mssparkutils.fs.put(inputPath + \"data.txt\", device_data, True)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"7. Run the SQL query again to see the aggregated error counts (if the query still returns no data, wait a few seconds and try again!) There should be one error for device 1, and two errors for device 2."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"microsoft": {
								"language": "sparksql"
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"select * from counts\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"8. Review the results, noting the number of errors. Then run the following code to write more device data."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"more_data = '''{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"error\"}\n",
							"{\"device\":\"Dev2\",\"status\":\"error\"}\n",
							"{\"device\":\"Dev1\",\"status\":\"ok\"}'''\n",
							"\n",
							"mssparkutils.fs.put(inputPath + \"more-data.txt\", more_data, True)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"9. Run the SQL query again (waiting a few seconds if necessary) to see the new status events reflected in the aggregations. There should now be two errors for device 1, and three errors for device 2."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"microsoft": {
								"language": "sparksql"
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"select * from counts\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Create a delta table\n",
							"\n",
							"Azure Synapse Analytics supports the Linux Foundation *Delta Lake* architecture, which builds on Spark Structured Streaming to add support for transactions, versioning, and other useful capabilities.\n",
							"\n",
							"In particular, you can create *delta tables* as a target (or *sink*) for streaming data, or as a *source* of streaming data for downstream queries.\n",
							"\n",
							"To explore this, we'll write the streaming dataframe based on the **data** folder we created previously to a new delta table, which we'll define using a path to a location in the file system.\n",
							"\n",
							"1. Run the cell below to stream the folder data to a delta table."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"delta_table_path = inputPath + 'deltatable'\n",
							"stream = fileDF.writeStream.format(\"delta\").option(\"checkpointLocation\", inputPath + 'checkpoint').start(delta_table_path)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"2. Now run the next cell to query the delta table to see the data that has been streamed to it. If at first the query returns no data, wait a few seconds and run the cell again)."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = spark.read.format(\"delta\").load(delta_table_path)\n",
							"display(df)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Delta tables enable you to use a feature named *time travel* to view the data at a previous point in time.\n",
							"\n",
							"4. Run the following query to retrieve the initial micro-batch of data that was streamed from the **devdata.txt** file. "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(delta_table_path)\n",
							"display(df)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"5. Now that you've finished exploring Spark Structured Streaming and delta tables, stop the stream of data and clean up the files used in this exercise."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stream.stop()\n",
							"query.stop()\n",
							"print(\"Stream stopped\")\n",
							"mssparkutils.fs.rm(inputPath, True)"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkSQL_Load_Data_From_Blob_To_Synapse_SQL_Pool')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "SparkSQL_Load_Data_From_Blob_To_Synapse_SQL_Pool",
				"folder": {
					"name": "Master Pipeline Notebooks"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "devpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fd6d14ab-2208-4820-8054-65f4188d8c88"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/devpool",
						"name": "devpool",
						"type": "Spark",
						"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/devpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Getiing the parameter value from the pipeline \r\n",
							"FolderName = \"2022_10\"\r\n",
							"Mode = \"overwrite\""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Using the parameter value creating a new variables to use while reading the file\r\n",
							"FolderName_Without_Separator = FolderName.replace(\"_\", \"\")\r\n",
							"year = FolderName.split('_')[0]\r\n",
							"month = FolderName.split('_')[1]"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import lit,col\r\n",
							"\r\n",
							"# Creating a spark session and connection to blob storage account\r\n",
							"blob_account_name = \"rawdevstorage\"\r\n",
							"blob_container_name = \"rawdata\"\r\n",
							"sc = SparkSession.builder.getOrCreate()\r\n",
							"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
							"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),blob_sas_token)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex for AMR\r\n",
							"import re\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_AMR_GEMEENTE_%s.csv' % (FolderName, FolderName_Without_Separator)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))\r\n",
							"\r\n",
							"# Reading the first File (Analogue Reading File)\r\n",
							"FileName = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_AMR_GEMEENTE_%s.csv' % (FolderName,FolderName_Without_Separator)\r\n",
							"df1 = spark.read.load(FileName, format='csv', header=True,delimiter=amr_delimiter_type,inferSchema=True)\r\n",
							"\r\n",
							"# Create a temporary view: To run SQL queries on a PySpark DataFrame, you need to create a temporary view using the createOrReplaceTempView method.\r\n",
							"df1.createOrReplaceTempView(\"AMR_Measurement_Reading\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Run SQL queries: Once you have created a temporary view, you can run SQL queries on it using the spark.sql method.\r\n",
							"# Example 2: remove duplicate from the temporarry view\r\n",
							"selected_df1 = spark.sql(\"SELECT Distinct * FROM AMR_Measurement_Reading\")\r\n",
							"\r\n",
							"# Recreating the view after removing the duplicates\r\n",
							"selected_df1.createOrReplaceTempView(\"AMR_Measurement_Reading\")\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"selected_df1 = spark.sql(\"SELECT Trekkingsdatum,Peildatum\\\r\n",
							", Markt, Leveringsadres_Postcode, Leveringsadres_Gemeente\\\r\n",
							", WerkelijkVerbruik_RM_2017, BenaderendVerbruik_VM_2017, AantalToegangspunten_2017\\\r\n",
							", WerkelijkVerbruik_RM_2018, BenaderendVerbruik_VM_2018, AantalToegangspunten_2018\\\r\n",
							", WerkelijkVerbruik_RM_2019, BenaderendVerbruik_VM_2019, AantalToegangspunten_2019\\\r\n",
							", WerkelijkVerbruik_RM_2020, BenaderendVerbruik_VM_2020, AantalToegangspunten_2020\\\r\n",
							", WerkelijkVerbruik_RM_2021, BenaderendVerbruik_VM_2021, AantalToegangspunten_2021\\\r\n",
							",'Analogue' as MeasurementType\\\r\n",
							" FROM AMR_Measurement_Reading\")\r\n",
							"\r\n",
							"# Recreating the view after removing the duplicates\r\n",
							"selected_df1.createOrReplaceTempView(\"AMR_Measurement_Reading\")\r\n",
							"\r\n",
							"# Display the result: To display the result of the SQL query, you can use the show method.\r\n",
							"display(selected_df1.limit(5))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a dynamic column delimiter using regex for AMR\r\n",
							"import re\r\n",
							"def f_get_delimiter (source_path):\r\n",
							"    try:\r\n",
							"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
							"        header_str = ''.join(headerlist)\r\n",
							"\r\n",
							"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
							"        return results.group()\r\n",
							"    except Exception as err:\r\n",
							"        print(\"Error Occured \", str(err))\r\n",
							"amr_Filename = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_DM_GEMEENTE_%s.csv' % (FolderName, FolderName_Without_Separator)\r\n",
							"amr_delimiter_type = (f_get_delimiter(amr_Filename))\r\n",
							"\r\n",
							"# Reading the first File (Analogue Reading File)\r\n",
							"FileName = 'abfss://rawdata@rawdevstorage.dfs.core.windows.net/%s/P6523_Verbruiken_DM_GEMEENTE_%s.csv' % (FolderName,FolderName_Without_Separator)\r\n",
							"df2 = spark.read.load(FileName, format='csv', header=True,delimiter=amr_delimiter_type,inferSchema=True)\r\n",
							"\r\n",
							"# Create a temporary view: To run SQL queries on a PySpark DataFrame, you need to create a temporary view using the createOrReplaceTempView method.\r\n",
							"df2.createOrReplaceTempView(\"DM_Measurement_Reading\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Run SQL queries: Once you have created a temporary view, you can run SQL queries on it using the spark.sql method.\r\n",
							"# Example 2: remove duplicate from the temporarry view\r\n",
							"selected_df2 = spark.sql(\"SELECT Distinct * FROM DM_Measurement_Reading\")\r\n",
							"\r\n",
							"# Recreating the view after removing the duplicates\r\n",
							"selected_df2.createOrReplaceTempView(\"DM_Measurement_Reading\")\r\n",
							"\r\n",
							"# Selecting the required columns\r\n",
							"selected_df2 = spark.sql(\"SELECT Trekkingsdatum,Peildatum\\\r\n",
							", Markt, Leveringsadres_Postcode, Leveringsadres_Gemeente\\\r\n",
							", WerkelijkVerbruik_RM_2017, BenaderendVerbruik_VM_2017, AantalToegangspunten_2017\\\r\n",
							", WerkelijkVerbruik_RM_2018, BenaderendVerbruik_VM_2018, AantalToegangspunten_2018\\\r\n",
							", WerkelijkVerbruik_RM_2019, BenaderendVerbruik_VM_2019, AantalToegangspunten_2019\\\r\n",
							", WerkelijkVerbruik_RM_2020, BenaderendVerbruik_VM_2020, AantalToegangspunten_2020\\\r\n",
							", WerkelijkVerbruik_RM_2021, BenaderendVerbruik_VM_2021, AantalToegangspunten_2021\\\r\n",
							",'Analogue' as MeasurementType\\\r\n",
							" FROM DM_Measurement_Reading\")\r\n",
							"\r\n",
							"# Recreating the view after removing the duplicates\r\n",
							"selected_df2.createOrReplaceTempView(\"DM_Measurement_Reading\")\r\n",
							"\r\n",
							"# Display the result: To display the result of the SQL query, you can use the show method.\r\n",
							"display(selected_df2.limit(5))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"with cte_union as (\r\n",
							"SELECT Distinct Trekkingsdatum\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\r\n",
							", Markt\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\r\n",
							", Leveringsadres_Gemeente\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\r\n",
							",'Analogue' as MeasurementType\r\n",
							"FROM AMR_Measurement_Reading\r\n",
							"UNION\r\n",
							"SELECT Distinct Trekkingsdatum\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\r\n",
							", Markt\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\r\n",
							", Leveringsadres_Gemeente\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\r\n",
							",'Analogue' as MeasurementType\r\n",
							"FROM DM_Measurement_Reading)\r\n",
							"\r\n",
							"SELECT * \r\n",
							"FROM cte_union\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"query = \"with cte_union as (\\\r\n",
							"SELECT Distinct Trekkingsdatum\\\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\\\r\n",
							", Markt\\\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\\\r\n",
							", Leveringsadres_Gemeente\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\\\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\\\r\n",
							",'Analogue' as MeasurementType \\\r\n",
							"FROM AMR_Measurement_Reading \\\r\n",
							"UNION \\\r\n",
							"SELECT Distinct Trekkingsdatum\\\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\\\r\n",
							", Markt\\\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\\\r\n",
							", Leveringsadres_Gemeente\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\\\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\\\r\n",
							",'Analogue' as MeasurementType \\\r\n",
							"FROM DM_Measurement_Reading)\\\r\n",
							"SELECT * \\\r\n",
							"FROM cte_union\"\r\n",
							"\r\n",
							"union_df = selected_df1 = spark.sql(query)\r\n",
							"union_df.createOrReplaceTempView(\"Measurement_Reading_union\")\r\n",
							"display(union_df.limit(5))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"with cte_AMR as (\r\n",
							"SELECT Trekkingsdatum\r\n",
							",Peildatum --COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\r\n",
							", Markt\r\n",
							", Leveringsadres_Postcode --CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\r\n",
							", Leveringsadres_Gemeente\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2017\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2017\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2017_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2017\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2018\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2018\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2018_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2018\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2019\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2019\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2019_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2019\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2020\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2020\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2020_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2020\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2021\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2021\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2021_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2021\r\n",
							"FROM AMR_Measurement_Reading\r\n",
							"GROUP BY  Trekkingsdatum\r\n",
							",Peildatum \r\n",
							", Markt\r\n",
							", Leveringsadres_Postcode \r\n",
							", Leveringsadres_Gemeente\r\n",
							")\r\n",
							",cte_DM as (\r\n",
							"SELECT Trekkingsdatum\r\n",
							",Peildatum --COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\r\n",
							", Markt\r\n",
							", Leveringsadres_Postcode --CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\r\n",
							", Leveringsadres_Gemeente\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2017\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2017\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2017_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2017\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2018\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2018\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2018_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2018\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2019\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2019\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2019_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2019\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2020\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2020\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2020_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2020\r\n",
							",SUM(CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4))) as WerkelijkVerbruik_RM_2021\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2021\r\n",
							",SUM(CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4))) as BenaderendVerbruik_VM_2021_Norm\r\n",
							",SUM(CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4))) as AantalToegangspunten_2021\r\n",
							"FROM DM_Measurement_Reading\r\n",
							"GROUP BY  Trekkingsdatum\r\n",
							",Peildatum \r\n",
							", Markt\r\n",
							", Leveringsadres_Postcode \r\n",
							", Leveringsadres_Gemeente\r\n",
							")\r\n",
							",CTE_JOIN as (\r\n",
							"    SELECT \r\n",
							"    A.Trekkingsdatum                        as AMR_Trekkingsdatum\r\n",
							"    ,A.Peildatum                            as AMR_Peildatum\r\n",
							"    ,A.Markt                                as AMR_Markt\r\n",
							"    ,A.Leveringsadres_Postcode              as AMR_Leveringsadres_Postcode\r\n",
							"    ,A.Leveringsadres_Gemeente              as AMR_Leveringsadres_Gemeente\r\n",
							"    ,A.WerkelijkVerbruik_RM_2017            as AMR_WerkelijkVerbruik_RM_2017\r\n",
							"    ,A.BenaderendVerbruik_VM_2017           as AMR_BenaderendVerbruik_VM_2017\r\n",
							"    ,A.BenaderendVerbruik_VM_2017_Norm      as AMR_BenaderendVerbruik_VM_2017_Norm\r\n",
							"    ,A.AantalToegangspunten_2017            as AMR_AantalToegangspunten_2017\r\n",
							"    ,A.WerkelijkVerbruik_RM_2018            as AMR_WerkelijkVerbruik_RM_2018\r\n",
							"    ,A.BenaderendVerbruik_VM_2018           as AMR_BenaderendVerbruik_VM_2018\r\n",
							"    ,A.BenaderendVerbruik_VM_2018_Norm      as AMR_BenaderendVerbruik_VM_2018_Norm\r\n",
							"    ,A.AantalToegangspunten_2018            as AMR_AantalToegangspunten_2018\r\n",
							"    ,A.WerkelijkVerbruik_RM_2019            as AMR_WerkelijkVerbruik_RM_2019\r\n",
							"    ,A.BenaderendVerbruik_VM_2019           as AMR_BenaderendVerbruik_VM_2019\r\n",
							"    ,A.BenaderendVerbruik_VM_2019_Norm      as AMR_BenaderendVerbruik_VM_2019_Norm\r\n",
							"    ,A.AantalToegangspunten_2019            as AMR_AantalToegangspunten_2019\r\n",
							"    ,A.WerkelijkVerbruik_RM_2020            as AMR_WerkelijkVerbruik_RM_2020\r\n",
							"    ,A.BenaderendVerbruik_VM_2020           as AMR_BenaderendVerbruik_VM_2020\r\n",
							"    ,A.BenaderendVerbruik_VM_2020_Norm      as AMR_BenaderendVerbruik_VM_2020_Norm\r\n",
							"    ,A.AantalToegangspunten_2020            as AMR_AantalToegangspunten_2020\r\n",
							"    ,A.WerkelijkVerbruik_RM_2021            as AMR_WerkelijkVerbruik_RM_2021\r\n",
							"    ,A.BenaderendVerbruik_VM_2021           as AMR_BenaderendVerbruik_VM_2021\r\n",
							"    ,A.BenaderendVerbruik_VM_2021_Norm      as AMR_BenaderendVerbruik_VM_2021_Norm\r\n",
							"    ,A.AantalToegangspunten_2021            as AMR_AantalToegangspunten_2021\r\n",
							"    ,(CAST(REPLACE(A.WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as AMR_Gemiddeld_WerkelijkVerbruik\r\n",
							"    ,(CAST(REPLACE(A.BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as AMR_Gemiddeld_BenaderendVerbruik\r\n",
							"    ,(CAST(REPLACE(A.BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as AMR_Gemiddeld_BenaderendVerbruik_Norm\r\n",
							"    ,CAST(REPLACE(A.AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(A.AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AMR_Total_AantalToegangspunten\r\n",
							"    ,B.Trekkingsdatum                       as DM_Trekkingsdatum\r\n",
							"    ,B.Peildatum                            as DM_Peildatum\r\n",
							"    ,B.Markt                                as DM_Markt\r\n",
							"    ,B.Leveringsadres_Postcode              as DM_Leveringsadres_Postcode\r\n",
							"    ,B.Leveringsadres_Gemeente              as DM_Leveringsadres_Gemeente\r\n",
							"    ,B.WerkelijkVerbruik_RM_2017            as DM_WerkelijkVerbruik_RM_2017\r\n",
							"    ,B.BenaderendVerbruik_VM_2017           as DM_BenaderendVerbruik_VM_2017\r\n",
							"    ,B.BenaderendVerbruik_VM_2017_Norm      as DM_BenaderendVerbruik_VM_2017_Norm\r\n",
							"    ,B.AantalToegangspunten_2017            as DM_AantalToegangspunten_2017\r\n",
							"    ,B.WerkelijkVerbruik_RM_2018            as DM_WerkelijkVerbruik_RM_2018\r\n",
							"    ,B.BenaderendVerbruik_VM_2018           as DM_BenaderendVerbruik_VM_2018\r\n",
							"    ,B.BenaderendVerbruik_VM_2018_Norm      as DM_BenaderendVerbruik_VM_2018_Norm\r\n",
							"    ,B.AantalToegangspunten_2018            as DM_AantalToegangspunten_2018\r\n",
							"    ,B.WerkelijkVerbruik_RM_2019            as DM_WerkelijkVerbruik_RM_2019\r\n",
							"    ,B.BenaderendVerbruik_VM_2019           as DM_BenaderendVerbruik_VM_2019\r\n",
							"    ,B.BenaderendVerbruik_VM_2019_Norm      as DM_BenaderendVerbruik_VM_2019_Norm\r\n",
							"    ,B.AantalToegangspunten_2019            as DM_AantalToegangspunten_2019\r\n",
							"    ,B.WerkelijkVerbruik_RM_2020            as DM_WerkelijkVerbruik_RM_2020\r\n",
							"    ,B.BenaderendVerbruik_VM_2020           as DM_BenaderendVerbruik_VM_2020\r\n",
							"    ,B.BenaderendVerbruik_VM_2020_Norm      as DM_BenaderendVerbruik_VM_2020_Norm\r\n",
							"    ,B.AantalToegangspunten_2020            as DM_AantalToegangspunten_2020\r\n",
							"    ,B.WerkelijkVerbruik_RM_2021            as DM_WerkelijkVerbruik_RM_2021\r\n",
							"    ,B.BenaderendVerbruik_VM_2021           as DM_BenaderendVerbruik_VM_2021\r\n",
							"    ,B.BenaderendVerbruik_VM_2021_Norm      as DM_BenaderendVerbruik_VM_2021_Norm\r\n",
							"    ,B.AantalToegangspunten_2021            as DM_AantalToegangspunten_2021\r\n",
							"    ,(CAST(REPLACE(B.WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as DM_Gemiddeld_WerkelijkVerbruik\r\n",
							"    ,(CAST(REPLACE(B.BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as DM_Gemiddeld_BenaderendVerbruik\r\n",
							"    ,(CAST(REPLACE(B.BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as DM_Gemiddeld_BenaderendVerbruik_Norm\r\n",
							"    ,CAST(REPLACE(B.AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(B.AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as DM_Total_AantalToegangspunten\r\n",
							"    FROM CTE_AMR A\r\n",
							"    FULL OUTER JOIN CTE_DM B ON A.Markt=B.Markt \r\n",
							"    AND A.Leveringsadres_Postcode=B.Leveringsadres_Postcode\r\n",
							"    AND A.Leveringsadres_Gemeente=B.Leveringsadres_Gemeente\r\n",
							"    AND A.Peildatum=B.Peildatum\r\n",
							")\r\n",
							"Select * \r\n",
							"FROM CTE_AMR\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"with cte_AMR as (\r\n",
							"SELECT Distinct Trekkingsdatum\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\r\n",
							", Markt\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\r\n",
							", Leveringsadres_Gemeente\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\r\n",
							",'Analogue' as MeasurementType\r\n",
							"FROM AMR_Measurement_Reading)\r\n",
							",cte_DM as (\r\n",
							"SELECT Distinct Trekkingsdatum\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\r\n",
							", Markt\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\r\n",
							", Leveringsadres_Gemeente\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\r\n",
							",'Analogue' as MeasurementType\r\n",
							"FROM DM_Measurement_Reading)\r\n",
							",CTE_JOIN as (\r\n",
							"    SELECT \r\n",
							"    A.Trekkingsdatum                        as AMR_Trekkingsdatum\r\n",
							"    ,A.Peildatum                            as AMR_Peildatum\r\n",
							"    ,A.Markt                                as AMR_Markt\r\n",
							"    ,A.Leveringsadres_Postcode              as AMR_Leveringsadres_Postcode\r\n",
							"    ,A.Leveringsadres_Gemeente              as AMR_Leveringsadres_Gemeente\r\n",
							"    ,A.WerkelijkVerbruik_RM_2017            as AMR_WerkelijkVerbruik_RM_2017\r\n",
							"    ,A.BenaderendVerbruik_VM_2017           as AMR_BenaderendVerbruik_VM_2017\r\n",
							"    ,A.BenaderendVerbruik_VM_2017_Norm      as AMR_BenaderendVerbruik_VM_2017_Norm\r\n",
							"    ,A.AantalToegangspunten_2017            as AMR_AantalToegangspunten_2017\r\n",
							"    ,A.WerkelijkVerbruik_RM_2018            as AMR_WerkelijkVerbruik_RM_2018\r\n",
							"    ,A.BenaderendVerbruik_VM_2018           as AMR_BenaderendVerbruik_VM_2018\r\n",
							"    ,A.BenaderendVerbruik_VM_2018_Norm      as AMR_BenaderendVerbruik_VM_2018_Norm\r\n",
							"    ,A.AantalToegangspunten_2018            as AMR_AantalToegangspunten_2018\r\n",
							"    ,A.WerkelijkVerbruik_RM_2019            as AMR_WerkelijkVerbruik_RM_2019\r\n",
							"    ,A.BenaderendVerbruik_VM_2019           as AMR_BenaderendVerbruik_VM_2019\r\n",
							"    ,A.BenaderendVerbruik_VM_2019_Norm      as AMR_BenaderendVerbruik_VM_2019_Norm\r\n",
							"    ,A.AantalToegangspunten_2019            as AMR_AantalToegangspunten_2019\r\n",
							"    ,A.WerkelijkVerbruik_RM_2020            as AMR_WerkelijkVerbruik_RM_2020\r\n",
							"    ,A.BenaderendVerbruik_VM_2020           as AMR_BenaderendVerbruik_VM_2020\r\n",
							"    ,A.BenaderendVerbruik_VM_2020_Norm      as AMR_BenaderendVerbruik_VM_2020_Norm\r\n",
							"    ,A.AantalToegangspunten_2020            as AMR_AantalToegangspunten_2020\r\n",
							"    ,A.WerkelijkVerbruik_RM_2021            as AMR_WerkelijkVerbruik_RM_2021\r\n",
							"    ,A.BenaderendVerbruik_VM_2021           as AMR_BenaderendVerbruik_VM_2021\r\n",
							"    ,A.BenaderendVerbruik_VM_2021_Norm      as AMR_BenaderendVerbruik_VM_2021_Norm\r\n",
							"    ,A.AantalToegangspunten_2021            as AMR_AantalToegangspunten_2021\r\n",
							"    ,A.Gemiddeld_WerkelijkVerbruik          as AMR_Gemiddeld_WerkelijkVerbruik\r\n",
							"    ,A.Gemiddeld_BenaderendVerbruik         as AMR_Gemiddeld_BenaderendVerbruik\r\n",
							"    ,A.Gemiddeld_BenaderendVerbruik_Norm    as AMR_Gemiddeld_BenaderendVerbruik_Norm\r\n",
							"    ,A.Total_AantalToegangspunten           as AMR_Total_AantalToegangspunten\r\n",
							"    ,A.MeasurementType                      as AMR_MeasurementType\r\n",
							"    ,B.Trekkingsdatum                       as DM_Trekkingsdatum\r\n",
							"    ,B.Peildatum                            as DM_Peildatum\r\n",
							"    ,B.Markt                                as DM_Markt\r\n",
							"    ,B.Leveringsadres_Postcode              as DM_Leveringsadres_Postcode\r\n",
							"    ,B.Leveringsadres_Gemeente              as DM_Leveringsadres_Gemeente\r\n",
							"    ,B.WerkelijkVerbruik_RM_2017            as DM_WerkelijkVerbruik_RM_2017\r\n",
							"    ,B.BenaderendVerbruik_VM_2017           as DM_BenaderendVerbruik_VM_2017\r\n",
							"    ,B.BenaderendVerbruik_VM_2017_Norm      as DM_BenaderendVerbruik_VM_2017_Norm\r\n",
							"    ,B.AantalToegangspunten_2017            as DM_AantalToegangspunten_2017\r\n",
							"    ,B.WerkelijkVerbruik_RM_2018            as DM_WerkelijkVerbruik_RM_2018\r\n",
							"    ,B.BenaderendVerbruik_VM_2018           as DM_BenaderendVerbruik_VM_2018\r\n",
							"    ,B.BenaderendVerbruik_VM_2018_Norm      as DM_BenaderendVerbruik_VM_2018_Norm\r\n",
							"    ,B.AantalToegangspunten_2018            as DM_AantalToegangspunten_2018\r\n",
							"    ,B.WerkelijkVerbruik_RM_2019            as DM_WerkelijkVerbruik_RM_2019\r\n",
							"    ,B.BenaderendVerbruik_VM_2019           as DM_BenaderendVerbruik_VM_2019\r\n",
							"    ,B.BenaderendVerbruik_VM_2019_Norm      as DM_BenaderendVerbruik_VM_2019_Norm\r\n",
							"    ,B.AantalToegangspunten_2019            as DM_AantalToegangspunten_2019\r\n",
							"    ,B.WerkelijkVerbruik_RM_2020            as DM_WerkelijkVerbruik_RM_2020\r\n",
							"    ,B.BenaderendVerbruik_VM_2020           as DM_BenaderendVerbruik_VM_2020\r\n",
							"    ,B.BenaderendVerbruik_VM_2020_Norm      as DM_BenaderendVerbruik_VM_2020_Norm\r\n",
							"    ,B.AantalToegangspunten_2020            as DM_AantalToegangspunten_2020\r\n",
							"    ,B.WerkelijkVerbruik_RM_2021            as DM_WerkelijkVerbruik_RM_2021\r\n",
							"    ,B.BenaderendVerbruik_VM_2021           as DM_BenaderendVerbruik_VM_2021\r\n",
							"    ,B.BenaderendVerbruik_VM_2021_Norm      as DM_BenaderendVerbruik_VM_2021_Norm\r\n",
							"    ,B.AantalToegangspunten_2021            as DM_AantalToegangspunten_2021\r\n",
							"    ,B.Gemiddeld_WerkelijkVerbruik          as DM_Gemiddeld_WerkelijkVerbruik\r\n",
							"    ,B.Gemiddeld_BenaderendVerbruik         as DM_Gemiddeld_BenaderendVerbruik\r\n",
							"    ,B.Gemiddeld_BenaderendVerbruik_Norm    as DM_Gemiddeld_BenaderendVerbruik_Norm\r\n",
							"    ,B.Total_AantalToegangspunten           as DM_Total_AantalToegangspunten\r\n",
							"    ,B.MeasurementType                      as DM_MeasurementType\r\n",
							"    FROM CTE_AMR A\r\n",
							"    FULL OUTER JOIN CTE_DM B ON A.Markt=B.Markt \r\n",
							"    AND A.Leveringsadres_Postcode=B.Leveringsadres_Postcode\r\n",
							"    AND A.Leveringsadres_Gemeente=B.Leveringsadres_Gemeente\r\n",
							"    AND A.Peildatum=B.Peildatum\r\n",
							")\r\n",
							"Select * \r\n",
							"FROM CTE_JOIN\r\n",
							"LIMIT 5"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"query =\"with cte_AMR as (\\\r\n",
							"SELECT Distinct Trekkingsdatum\\\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\\\r\n",
							", Markt\\\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\\\r\n",
							", Leveringsadres_Gemeente\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\\\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\\\r\n",
							",'Analogue' as MeasurementType \\\r\n",
							"FROM AMR_Measurement_Reading)\\\r\n",
							",cte_DM as (\\\r\n",
							"SELECT Distinct Trekkingsdatum\\\r\n",
							",COALESCE(TO_DATE(Peildatum, 'dd/MMM/yy') ,TO_DATE(Peildatum, 'MM/dd/yy'),TO_DATE(Peildatum, 'dd-MMM-yy'),Peildatum) as Peildatum\\\r\n",
							", Markt\\\r\n",
							", CAST(Leveringsadres_Postcode as INT) Leveringsadres_Postcode\\\r\n",
							", Leveringsadres_Gemeente\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2017_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2017\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2018_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2018\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2019_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2019\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2020_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2020\\\r\n",
							",CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)) as WerkelijkVerbruik_RM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021\\\r\n",
							",CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)) as BenaderendVerbruik_VM_2021_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as AantalToegangspunten_2021\\\r\n",
							",(CAST(REPLACE(WerkelijkVerbruik_RM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(WerkelijkVerbruik_RM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_WerkelijkVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik\\\r\n",
							",(CAST(REPLACE(BenaderendVerbruik_VM_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(BenaderendVerbruik_VM_2021,',','.') as DECIMAL(16,4)))/5 as Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
							",CAST(REPLACE(AantalToegangspunten_2017,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2018,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2019,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2020,',','.') as DECIMAL(16,4))+CAST(REPLACE(AantalToegangspunten_2021,',','.') as DECIMAL(16,4)) as Total_AantalToegangspunten\\\r\n",
							",'Analogue' as MeasurementType \\\r\n",
							"FROM DM_Measurement_Reading)\\\r\n",
							",CTE_JOIN as (\\\r\n",
							"    SELECT A.Trekkingsdatum                        as AMR_Trekkingsdatum\\\r\n",
							"    ,A.Peildatum                            as AMR_Peildatum\\\r\n",
							"    ,A.Markt                                as AMR_Markt\\\r\n",
							"    ,A.Leveringsadres_Postcode              as AMR_Leveringsadres_Postcode\\\r\n",
							"    ,A.Leveringsadres_Gemeente              as AMR_Leveringsadres_Gemeente\\\r\n",
							"    ,A.WerkelijkVerbruik_RM_2017            as AMR_WerkelijkVerbruik_RM_2017\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2017           as AMR_BenaderendVerbruik_VM_2017\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2017_Norm      as AMR_BenaderendVerbruik_VM_2017_Norm\\\r\n",
							"    ,A.AantalToegangspunten_2017            as AMR_AantalToegangspunten_2017\\\r\n",
							"    ,A.WerkelijkVerbruik_RM_2018            as AMR_WerkelijkVerbruik_RM_2018\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2018           as AMR_BenaderendVerbruik_VM_2018\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2018_Norm      as AMR_BenaderendVerbruik_VM_2018_Norm\\\r\n",
							"    ,A.AantalToegangspunten_2018            as AMR_AantalToegangspunten_2018\\\r\n",
							"    ,A.WerkelijkVerbruik_RM_2019            as AMR_WerkelijkVerbruik_RM_2019\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2019           as AMR_BenaderendVerbruik_VM_2019\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2019_Norm      as AMR_BenaderendVerbruik_VM_2019_Norm\\\r\n",
							"    ,A.AantalToegangspunten_2019            as AMR_AantalToegangspunten_2019\\\r\n",
							"    ,A.WerkelijkVerbruik_RM_2020            as AMR_WerkelijkVerbruik_RM_2020\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2020           as AMR_BenaderendVerbruik_VM_2020\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2020_Norm      as AMR_BenaderendVerbruik_VM_2020_Norm\\\r\n",
							"    ,A.AantalToegangspunten_2020            as AMR_AantalToegangspunten_2020\\\r\n",
							"    ,A.WerkelijkVerbruik_RM_2021            as AMR_WerkelijkVerbruik_RM_2021\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2021           as AMR_BenaderendVerbruik_VM_2021\\\r\n",
							"    ,A.BenaderendVerbruik_VM_2021_Norm      as AMR_BenaderendVerbruik_VM_2021_Norm\\\r\n",
							"    ,A.AantalToegangspunten_2021            as AMR_AantalToegangspunten_2021\\\r\n",
							"    ,A.Gemiddeld_WerkelijkVerbruik          as AMR_Gemiddeld_WerkelijkVerbruik\\\r\n",
							"    ,A.Gemiddeld_BenaderendVerbruik         as AMR_Gemiddeld_BenaderendVerbruik\\\r\n",
							"    ,A.Gemiddeld_BenaderendVerbruik_Norm    as AMR_Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
							"    ,A.Total_AantalToegangspunten           as AMR_Total_AantalToegangspunten\\\r\n",
							"    ,A.MeasurementType                      as AMR_MeasurementType\\\r\n",
							"    ,B.Trekkingsdatum                       as DM_Trekkingsdatum\\\r\n",
							"    ,B.Peildatum                            as DM_Peildatum\\\r\n",
							"    ,B.Markt                                as DM_Markt\\\r\n",
							"    ,B.Leveringsadres_Postcode              as DM_Leveringsadres_Postcode\\\r\n",
							"    ,B.Leveringsadres_Gemeente              as DM_Leveringsadres_Gemeente\\\r\n",
							"    ,B.WerkelijkVerbruik_RM_2017            as DM_WerkelijkVerbruik_RM_2017\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2017           as DM_BenaderendVerbruik_VM_2017\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2017_Norm      as DM_BenaderendVerbruik_VM_2017_Norm\\\r\n",
							"    ,B.AantalToegangspunten_2017            as DM_AantalToegangspunten_2017\\\r\n",
							"    ,B.WerkelijkVerbruik_RM_2018            as DM_WerkelijkVerbruik_RM_2018\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2018           as DM_BenaderendVerbruik_VM_2018\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2018_Norm      as DM_BenaderendVerbruik_VM_2018_Norm\\\r\n",
							"    ,B.AantalToegangspunten_2018            as DM_AantalToegangspunten_2018\\\r\n",
							"    ,B.WerkelijkVerbruik_RM_2019            as DM_WerkelijkVerbruik_RM_2019\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2019           as DM_BenaderendVerbruik_VM_2019\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2019_Norm      as DM_BenaderendVerbruik_VM_2019_Norm\\\r\n",
							"    ,B.AantalToegangspunten_2019            as DM_AantalToegangspunten_2019\\\r\n",
							"    ,B.WerkelijkVerbruik_RM_2020            as DM_WerkelijkVerbruik_RM_2020\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2020           as DM_BenaderendVerbruik_VM_2020\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2020_Norm      as DM_BenaderendVerbruik_VM_2020_Norm\\\r\n",
							"    ,B.AantalToegangspunten_2020            as DM_AantalToegangspunten_2020\\\r\n",
							"    ,B.WerkelijkVerbruik_RM_2021            as DM_WerkelijkVerbruik_RM_2021\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2021           as DM_BenaderendVerbruik_VM_2021\\\r\n",
							"    ,B.BenaderendVerbruik_VM_2021_Norm      as DM_BenaderendVerbruik_VM_2021_Norm\\\r\n",
							"    ,B.AantalToegangspunten_2021            as DM_AantalToegangspunten_2021\\\r\n",
							"    ,B.Gemiddeld_WerkelijkVerbruik          as DM_Gemiddeld_WerkelijkVerbruik\\\r\n",
							"    ,B.Gemiddeld_BenaderendVerbruik         as DM_Gemiddeld_BenaderendVerbruik\\\r\n",
							"    ,B.Gemiddeld_BenaderendVerbruik_Norm    as DM_Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
							"    ,B.Total_AantalToegangspunten           as DM_Total_AantalToegangspunten\\\r\n",
							"    ,B.MeasurementType                      as DM_MeasurementType \\\r\n",
							"    FROM CTE_AMR A \\\r\n",
							"    FULL OUTER JOIN CTE_DM B ON A.Markt=B.Markt \\\r\n",
							"    AND A.Leveringsadres_Postcode=B.Leveringsadres_Postcode \\\r\n",
							"    AND A.Leveringsadres_Gemeente=B.Leveringsadres_Gemeente \\\r\n",
							"    AND A.Peildatum=B.Peildatum \\\r\n",
							") Select * FROM CTE_JOIN\"\r\n",
							"\r\n",
							"join_df = selected_df2 = spark.sql(query)\r\n",
							"join_df.createOrReplaceTempView(\"Measurement_Reading_join\")\r\n",
							"display(join_df.limit(5))"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT COUNT(*) as CT_Union FROM Measurement_Reading_union;\r\n",
							"SELECT COUNT(*) as CT_Join FROM Measurement_Reading_join;"
						],
						"outputs": [],
						"execution_count": 80
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT Peildatum,Markt,Leveringsadres_Postcode,COUNT(*) as Count_Union FROM Measurement_Reading_union GROUP BY Peildatum,Markt,Leveringsadres_Postcode;"
						],
						"outputs": [],
						"execution_count": 82
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT AMR_Peildatum,AMR_Markt,AMR_Leveringsadres_Postcode,DM_Peildatum,DM_Markt,DM_Leveringsadres_Postcode,COUNT(*) as Count_Join \r\n",
							"FROM Measurement_Reading_join \r\n",
							"GROUP BY AMR_Peildatum,AMR_Markt,AMR_Leveringsadres_Postcode,DM_Peildatum,DM_Markt,DM_Leveringsadres_Postcode;"
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_sparksql_union'\r\n",
							"write_format=\"delta\"\r\n",
							"partition_by=[\"Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"union_df\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_by)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)"
						],
						"outputs": [],
						"execution_count": 85
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_sparksql_join'\r\n",
							"write_format=\"delta\"\r\n",
							"partition_by=[\"DM_Peildatum\"]\r\n",
							"mode_ = Mode #overwrite #append\r\n",
							"\r\n",
							"join_df\\\r\n",
							".write\\\r\n",
							".option(\"header\", \"true\")\\\r\n",
							".option(\"overwriteSchema\", \"true\")\\\r\n",
							".format(write_format)\\\r\n",
							".partitionBy(partition_by)\\\r\n",
							".mode(mode_)\\\r\n",
							".save(file_path)"
						],
						"outputs": [],
						"execution_count": 86
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/devpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sanzpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		}
	]
}