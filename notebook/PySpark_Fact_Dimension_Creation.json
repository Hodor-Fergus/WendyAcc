{
	"name": "PySpark_Fact_Dimension_Creation",
	"properties": {
		"description": "Load Data From Blob To Synapse SQL Pool",
		"folder": {
			"name": "Master Pipeline Notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sanzpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9136e542-c7b2-4561-9ee6-dc55f9b3ebe1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/sanzpool",
				"name": "sanzpool",
				"type": "Spark",
				"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sanzpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"# Imporing the libraries\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import lit,col,sum,mean,regexp_replace,to_date,count,row_number,unix_timestamp,date_format,quarter,expr,weekofyear\r\n",
					"from pyspark.sql.types import DateType,TimestampType\r\n",
					"from pyspark.sql.window import Window\r\n",
					"\r\n",
					"# Setting the flag to handle the date formats\r\n",
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
					"\r\n",
					"# Creating a spark session and connection to blob storage account\r\n",
					"blob_account_name = \"rawdevstorage\"\r\n",
					"blob_container_name = \"output\"\r\n",
					"sc = SparkSession.builder.getOrCreate()\r\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
					"spark.conf.set(\r\n",
					"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
					"    blob_sas_token)\r\n",
					""
				],
				"execution_count": 179
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the path to the Delta table\r\n",
					"delta_table_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pyspark_join'\r\n",
					"\r\n",
					"# Read Delta table into a DataFrame\r\n",
					"reference_table = spark.read.format(\"delta\").load(delta_table_path)"
				],
				"execution_count": 180
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Show the contents of the DataFrame\r\n",
					"display(reference_table.limit(5))"
				],
				"execution_count": 181
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Reading the geo location %%file\r\n",
					"geo_location = spark.read.csv(\"abfss://output@rawdevstorage.dfs.core.windows.net/geo_postcode.csv\", header=True, inferSchema=True)\r\n",
					"\r\n",
					"# Displaying a geo location file\r\n",
					"display(geo_location.limit(5))"
				],
				"execution_count": 182
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creating a group by for dimensions\r\n",
					"grouped_reference_table_markt_dimension = reference_table.groupBy(\"DM_Markt\")\r\n",
					"markt_dimension1 = grouped_reference_table_markt_dimension.agg(count(\"DM_Trekkingsdatum\"))\r\n",
					"grouped_reference_table_markt_dimension = reference_table.groupBy(\"AM_Markt\")\r\n",
					"markt_dimension2 = grouped_reference_table_markt_dimension.agg(count(\"AM_Trekkingsdatum\"))\r\n",
					"markt_dimension = markt_dimension1.union(markt_dimension2).distinct()\r\n",
					"\r\n",
					"grouped_reference_table_date_dimension_1 = reference_table.groupBy(\"DM_Trekkingsdatum\")\r\n",
					"date_dimension_1 = grouped_reference_table_date_dimension_1.agg(count(\"DM_Trekkingsdatum\"))\r\n",
					"grouped_reference_table_date_dimension_1 = reference_table.groupBy(\"AM_Trekkingsdatum\")\r\n",
					"date_dimension_2 = grouped_reference_table_date_dimension_1.agg(count(\"AM_Trekkingsdatum\"))\r\n",
					"date_dimension_1 = date_dimension_1.union(date_dimension_2).distinct()\r\n",
					"\r\n",
					"grouped_reference_table_date_dimension_2 = reference_table.groupBy(\"DM_Peildatum\")\r\n",
					"date_dimension_2 = grouped_reference_table_date_dimension_2.agg(count(\"DM_Trekkingsdatum\"))\r\n",
					"grouped_reference_table_date_dimension_2 = reference_table.groupBy(\"AM_Peildatum\")\r\n",
					"date_dimension_3 = grouped_reference_table_date_dimension_2.agg(count(\"AM_Trekkingsdatum\"))\r\n",
					"date_dimension_2 = date_dimension_2.union(date_dimension_3).distinct()\r\n",
					"\r\n",
					"grouped_reference_table_geo_location_dimension = reference_table.groupBy(\"DM_Leveringsadres_Postcode\",\"DM_Leveringsadres_Gemeente\")\r\n",
					"geo_location_dimension1 = grouped_reference_table_geo_location_dimension.agg(count(\"DM_Trekkingsdatum\"))\r\n",
					"grouped_reference_table_geo_location_dimension = reference_table.groupBy(\"AM_Leveringsadres_Postcode\",\"AM_Leveringsadres_Gemeente\")\r\n",
					"geo_location_dimension2 = grouped_reference_table_geo_location_dimension.agg(count(\"AM_Trekkingsdatum\"))\r\n",
					"geo_location_dimension = geo_location_dimension1.union(geo_location_dimension2).distinct()\r\n",
					"\r\n",
					"# Exclude the undefined/null value\r\n",
					"markt_dimension = markt_dimension.filter(col(\"DM_Markt\").isNotNull())\r\n",
					"\r\n",
					"date_dimension_1 = date_dimension_1.filter(col(\"DM_Trekkingsdatum\").isNotNull())\r\n",
					"date_dimension_2 = date_dimension_2.filter(col(\"DM_Peildatum\").isNotNull())\r\n",
					"geo_location_dimension = geo_location_dimension.filter(col(\"DM_Leveringsadres_Postcode\").isNotNull())\r\n",
					"geo_location_dimension = geo_location_dimension.filter(col(\"DM_Leveringsadres_Gemeente\").isNotNull())\r\n",
					"\r\n",
					"# Rename columns\r\n",
					"markt_dimension = markt_dimension.withColumnRenamed(\"DM_Markt\", \"Markt_Name\") \\\r\n",
					".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
					"\r\n",
					"date_dimension_1 = date_dimension_1.withColumnRenamed(\"DM_Trekkingsdatum\", \"Date\") \\\r\n",
					".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
					"\r\n",
					"date_dimension_2 = date_dimension_2.withColumnRenamed(\"DM_Peildatum\", \"Date\") \\\r\n",
					".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
					"\r\n",
					"geo_location_dimension = geo_location_dimension.withColumnRenamed(\"DM_Leveringsadres_Postcode\", \"Leveringsadres_Postcode\") \\\r\n",
					".withColumnRenamed(\"DM_Leveringsadres_Gemeente\", \"Leveringsadres_Gemeente\")\\\r\n",
					".withColumnRenamed(\"count(DM_Trekkingsdatum)\", \"count\")\r\n",
					"\r\n",
					"# Selecting specific columns\r\n",
					"markt_dimension = markt_dimension.select('Markt_Name').distinct().orderBy(\"Markt_Name\")\r\n",
					"date_dimension_1 = date_dimension_1.select(\"Date\").distinct().orderBy(\"Date\")\r\n",
					"date_dimension_2 = date_dimension_2.select(\"Date\").distinct().orderBy(\"Date\")\r\n",
					"geo_location_dimension = geo_location_dimension.select(\"Leveringsadres_Postcode\",\"Leveringsadres_Gemeente\").distinct().orderBy(\"Leveringsadres_Postcode\")\r\n",
					"\r\n",
					"# joinigng the dataframe to get all the column for geo location dimension\r\n",
					"geo_location_dimension = geo_location.join(geo_location_dimension, geo_location[\"postcode\"] == geo_location_dimension[\"Leveringsadres_Postcode\"], \"inner\")\r\n",
					"\r\n",
					"# Unioning the date dimension and removing the duplicates\r\n",
					"date_dimension = date_dimension_1.union(date_dimension_2).distinct().orderBy(\"Date\")"
				],
				"execution_count": 183
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the window specification for the grouping\r\n",
					"markt_dimension_window_spec = Window.orderBy(markt_dimension[\"Markt_Name\"].desc()) #Window.partitionBy(\"DM_Markt\").orderBy(\"DM_Markt\")\r\n",
					"date_dimension_window_spec = Window.orderBy(date_dimension[\"Date\"].desc())"
				],
				"execution_count": 184
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Add an auto-incrementing column to the DataFrame within the group\r\n",
					"markt_dimension = markt_dimension.withColumn(\"Markt_ID\", row_number().over(markt_dimension_window_spec))\r\n",
					"date_dimension = date_dimension.withColumn(\"Date_ID\", row_number().over(date_dimension_window_spec))\r\n",
					"\r\n",
					"# Adding additional columns for the date_dimension_window_spec\r\n",
					"date_dimension = date_dimension.withColumn(\"Day\", date_format(date_dimension[\"Date\"], \"d\").cast(\"integer\"))\r\n",
					"date_dimension = date_dimension.withColumn(\"Month\", date_format(date_dimension[\"Date\"], \"M\").cast(\"integer\"))\r\n",
					"date_dimension = date_dimension.withColumn(\"Year\", date_format(date_dimension[\"Date\"], \"y\").cast(\"integer\"))\r\n",
					"date_dimension = date_dimension.withColumn(\"Quarter\", quarter(date_dimension[\"Date\"]))\r\n",
					"date_dimension = date_dimension.withColumn(\"Day_Of_Year\", expr(\"dayofyear(Date)\"))\r\n",
					"date_dimension = date_dimension.withColumn(\"Week_Number\", weekofyear(date_dimension[\"Date\"]))\r\n",
					"\r\n",
					"# Selecting specific columns and Rearranging the columns\r\n",
					"markt_dimension = markt_dimension.select(\"Markt_ID\", \"Markt_Name\")\r\n",
					"date_dimension = date_dimension.select(\"Date_ID\",\"Date\",\"Day\",\"Month\",\"Year\",\"Quarter\",\"Day_Of_Year\",\"Week_Number\")\r\n",
					"geo_location_dimension = geo_location_dimension.select('dwh_id', 'postcode', 'Leveringsadres_Postcode', 'Leveringsadres_Gemeente', 'hoofdgemeente',\r\n",
					"'huidige_hoofdgemeente', 'gewest', 'huidig_gewest', 'provincie', 'huidige_provincie',\r\n",
					"'arrondissement', 'huidig_arrondissement', 'niscode', 'huidige_niscode',)\r\n",
					"\r\n",
					"# Displaying the Markt markt_dimension\r\n",
					"display(markt_dimension.limit(5))\r\n",
					"display(date_dimension.limit(5))\r\n",
					"display(geo_location_dimension.limit(5))"
				],
				"execution_count": 185
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a Fact delta_table_path by joining the reference table with dimensions\r\n",
					"fact_table = reference_table.join(geo_location_dimension, (reference_table[\"DM_Leveringsadres_Postcode\"] == geo_location_dimension[\"Leveringsadres_Postcode\"]) | (reference_table[\"AM_Leveringsadres_Postcode\"] == geo_location_dimension[\"Leveringsadres_Postcode\"]), \"left\")\r\n",
					"fact_table = fact_table.join(markt_dimension, (fact_table[\"DM_Markt\"] == markt_dimension[\"Markt_Name\"]) | (fact_table[\"AM_Markt\"] == markt_dimension[\"Markt_Name\"]), \"left\")\r\n",
					"fact_table = fact_table.join(date_dimension, (fact_table[\"DM_Peildatum\"] == date_dimension[\"Date\"]) | (fact_table[\"AM_Peildatum\"] == date_dimension[\"Date\"]), \"left\")\r\n",
					"\r\n",
					"# Selecting the required columns\r\n",
					"fact_table = fact_table.select( 'Date_ID','Markt_ID','DM_Trekkingsdatum','dwh_id',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2017',\r\n",
					" 'DM_BenaderendVerbruik_VM_2017',\r\n",
					" 'DM_BenaderendVerbruik_VM_2017_Norm',\r\n",
					" 'DM_AantalToegangspunten_2017',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2018',\r\n",
					" 'DM_BenaderendVerbruik_VM_2018',\r\n",
					" 'DM_BenaderendVerbruik_VM_2018_Norm',\r\n",
					" 'DM_AantalToegangspunten_2018',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2019',\r\n",
					" 'DM_BenaderendVerbruik_VM_2019',\r\n",
					" 'DM_BenaderendVerbruik_VM_2019_Norm',\r\n",
					" 'DM_AantalToegangspunten_2019',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2020',\r\n",
					" 'DM_BenaderendVerbruik_VM_2020',\r\n",
					" 'DM_BenaderendVerbruik_VM_2020_Norm',\r\n",
					" 'DM_AantalToegangspunten_2020',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2021',\r\n",
					" 'DM_BenaderendVerbruik_VM_2021',\r\n",
					" 'DM_BenaderendVerbruik_VM_2021_Norm',\r\n",
					" 'DM_AantalToegangspunten_2021',\r\n",
					" 'DM_Gemiddeld_WerkelijkVerbruik',\r\n",
					" 'DM_Gemiddeld_BenaderendVerbruik',\r\n",
					" 'DM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
					" 'DM_Total_AantalToegangspunten',\r\n",
					" 'AM_Trekkingsdatum',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2017',\r\n",
					" 'AM_BenaderendVerbruik_VM_2017',\r\n",
					" 'AM_BenaderendVerbruik_VM_2017_Norm',\r\n",
					" 'AM_AantalToegangspunten_2017',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2018',\r\n",
					" 'AM_BenaderendVerbruik_VM_2018',\r\n",
					" 'AM_BenaderendVerbruik_VM_2018_Norm',\r\n",
					" 'AM_AantalToegangspunten_2018',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2019',\r\n",
					" 'AM_BenaderendVerbruik_VM_2019',\r\n",
					" 'AM_BenaderendVerbruik_VM_2019_Norm',\r\n",
					" 'AM_AantalToegangspunten_2019',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2020',\r\n",
					" 'AM_BenaderendVerbruik_VM_2020',\r\n",
					" 'AM_BenaderendVerbruik_VM_2020_Norm',\r\n",
					" 'AM_AantalToegangspunten_2020',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2021',\r\n",
					" 'AM_BenaderendVerbruik_VM_2021',\r\n",
					" 'AM_BenaderendVerbruik_VM_2021_Norm',\r\n",
					" 'AM_AantalToegangspunten_2021',\r\n",
					" 'AM_Gemiddeld_WerkelijkVerbruik',\r\n",
					" 'AM_Gemiddeld_BenaderendVerbruik',\r\n",
					" 'AM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
					" 'AM_Total_AantalToegangspunten')\r\n",
					"\r\n",
					"# Renaming the columns\r\n",
					"fact_table = fact_table.withColumnRenamed(\"Date_ID\", \"Peildatum_ID\")\\\r\n",
					".withColumnRenamed(\"dwh_id\", \"Geo_Location_ID\")\\\r\n",
					"\r\n",
					"# Making more Join Operation\r\n",
					"fact_table = fact_table.join(date_dimension, (fact_table[\"DM_Trekkingsdatum\"] == date_dimension[\"Date\"]) | (fact_table[\"AM_Trekkingsdatum\"] == date_dimension[\"Date\"]), \"left\")\r\n",
					"\r\n",
					"\r\n",
					"# Selecting the required columns\r\n",
					"fact_table = fact_table.select( 'Peildatum_ID','Date_ID',\r\n",
					" 'Markt_ID',\r\n",
					" 'Geo_Location_ID',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2017',\r\n",
					" 'DM_BenaderendVerbruik_VM_2017',\r\n",
					" 'DM_BenaderendVerbruik_VM_2017_Norm',\r\n",
					" 'DM_AantalToegangspunten_2017',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2018',\r\n",
					" 'DM_BenaderendVerbruik_VM_2018',\r\n",
					" 'DM_BenaderendVerbruik_VM_2018_Norm',\r\n",
					" 'DM_AantalToegangspunten_2018',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2019',\r\n",
					" 'DM_BenaderendVerbruik_VM_2019',\r\n",
					" 'DM_BenaderendVerbruik_VM_2019_Norm',\r\n",
					" 'DM_AantalToegangspunten_2019',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2020',\r\n",
					" 'DM_BenaderendVerbruik_VM_2020',\r\n",
					" 'DM_BenaderendVerbruik_VM_2020_Norm',\r\n",
					" 'DM_AantalToegangspunten_2020',\r\n",
					" 'DM_WerkelijkVerbruik_RM_2021',\r\n",
					" 'DM_BenaderendVerbruik_VM_2021',\r\n",
					" 'DM_BenaderendVerbruik_VM_2021_Norm',\r\n",
					" 'DM_AantalToegangspunten_2021',\r\n",
					" 'DM_Gemiddeld_WerkelijkVerbruik',\r\n",
					" 'DM_Gemiddeld_BenaderendVerbruik',\r\n",
					" 'DM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
					" 'DM_Total_AantalToegangspunten',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2017',\r\n",
					" 'AM_BenaderendVerbruik_VM_2017',\r\n",
					" 'AM_BenaderendVerbruik_VM_2017_Norm',\r\n",
					" 'AM_AantalToegangspunten_2017',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2018',\r\n",
					" 'AM_BenaderendVerbruik_VM_2018',\r\n",
					" 'AM_BenaderendVerbruik_VM_2018_Norm',\r\n",
					" 'AM_AantalToegangspunten_2018',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2019',\r\n",
					" 'AM_BenaderendVerbruik_VM_2019',\r\n",
					" 'AM_BenaderendVerbruik_VM_2019_Norm',\r\n",
					" 'AM_AantalToegangspunten_2019',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2020',\r\n",
					" 'AM_BenaderendVerbruik_VM_2020',\r\n",
					" 'AM_BenaderendVerbruik_VM_2020_Norm',\r\n",
					" 'AM_AantalToegangspunten_2020',\r\n",
					" 'AM_WerkelijkVerbruik_RM_2021',\r\n",
					" 'AM_BenaderendVerbruik_VM_2021',\r\n",
					" 'AM_BenaderendVerbruik_VM_2021_Norm',\r\n",
					" 'AM_AantalToegangspunten_2021',\r\n",
					" 'AM_Gemiddeld_WerkelijkVerbruik',\r\n",
					" 'AM_Gemiddeld_BenaderendVerbruik',\r\n",
					" 'AM_Gemiddeld_BenaderendVerbruik_Norm',\r\n",
					" 'AM_Total_AantalToegangspunten')\r\n",
					"\r\n",
					" \r\n",
					"# Renaming the columns\r\n",
					"fact_table = fact_table.withColumnRenamed(\"Date_ID\", \"Trekkingsdatum_ID\")"
				],
				"execution_count": 186
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(fact_table.limit(5))"
				],
				"execution_count": 187
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Writing the markt dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Markt_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"markt_dimension\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 188
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the date dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Date_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"date_dimension\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 189
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the geo location dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Geo_Location_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"geo_location_dimension\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 190
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the fact table to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Fact_Table'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"fact_table\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 191
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}