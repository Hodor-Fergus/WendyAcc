{
	"name": "Pandas_Fact_Dimension_Creation",
	"properties": {
		"description": "Pandas_Fact_Dimension_Creation",
		"folder": {
			"name": "Master Pipeline Notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sanzpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "43d94073-f858-458e-8863-cb393a725488"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/sanzpool",
				"name": "sanzpool",
				"type": "Spark",
				"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sanzpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"# Imporing the libraries\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import lit,col,sum,mean,regexp_replace,to_date,count,row_number,unix_timestamp,date_format,quarter,expr,weekofyear,concat\r\n",
					"from pyspark.sql.types import DateType,TimestampType\r\n",
					"from pyspark.sql.window import Window\r\n",
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"\r\n",
					"# Setting the flag to handle the date formats\r\n",
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
					"\r\n",
					"# Creating a spark session and connection to blob storage account\r\n",
					"blob_account_name = \"rawdevstorage\"\r\n",
					"blob_container_name = \"output\"\r\n",
					"sc = SparkSession.builder.getOrCreate()\r\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
					"spark.conf.set(\r\n",
					"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
					"    blob_sas_token)\r\n",
					""
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the path to the Delta table\r\n",
					"delta_table_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_pandas_join'\r\n",
					"\r\n",
					"# Read Delta table into a DataFrame\r\n",
					"reference_table = spark.read.format(\"delta\").load(delta_table_path)"
				],
				"execution_count": 132
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Convert to pandas data frame\r\n",
					"reference_table = reference_table.select(\"*\").toPandas()\r\n",
					"\r\n",
					"# Show the contents of the DataFrame\r\n",
					"reference_table.head(5)"
				],
				"execution_count": 133
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Reading the geo location file\r\n",
					"geo_location = spark.read.csv(\"abfss://output@rawdevstorage.dfs.core.windows.net/geo_postcode.csv\", header=True, inferSchema=True)\r\n",
					"\r\n",
					"# Convert to pandas data frame\r\n",
					"geo_location = geo_location.select(\"*\").toPandas()\r\n",
					"\r\n",
					"# Displaying a geo location file\r\n",
					"geo_location.head(5)"
				],
				"execution_count": 134
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Reading the date file\r\n",
					"date = spark.read.csv(\"abfss://output@rawdevstorage.dfs.core.windows.net/time_dimension.csv\", header=True, inferSchema=True)\r\n",
					"\r\n",
					"date = date.filter(col(\"datum\") >= \"2002-01-01\")\r\n",
					"\r\n",
					"# Convert to pandas data frame\r\n",
					"date = date.select(\"*\").toPandas()\r\n",
					"\r\n",
					"# Displaying a date file\r\n",
					"date.head(5)"
				],
				"execution_count": 135
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creating a group by for market dimensions\r\n",
					"grouped_reference_table_markt_dimension = reference_table.groupby(['Markt'])\r\n",
					"markt_dimension = grouped_reference_table_markt_dimension.agg(total_count=('Trekkingsdatum', 'count'))\r\n",
					"\r\n",
					"# Restiing the index\r\n",
					"markt_dimension = markt_dimension.head().reset_index()\r\n",
					"\r\n",
					"# Exclude the undefined/null value\r\n",
					"markt_dimension = markt_dimension.dropna()\r\n",
					"\r\n",
					"# Add an auto-incrementing column to the DataFrame within the group\r\n",
					"markt_dimension['Markt_ID'] = np.arange(1,markt_dimension.shape[0]+1)\r\n",
					"\r\n",
					"# Selecting specific columns\r\n",
					"markt_dimension = markt_dimension[['Markt_ID','Markt']]\r\n",
					"\r\n",
					"markt_dimension.head()"
				],
				"execution_count": 136
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Converting to spark dataframe\r\n",
					"markt_dimension_sparkdf = spark.createDataFrame(markt_dimension)"
				],
				"execution_count": 137
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the markt dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PandasDimensions/Markt_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"markt_dimension_sparkdf\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 138
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creating a group by for market dimensions\r\n",
					"grouped_reference_table_geo_location_dimension = reference_table.groupby(['Leveringsadres_Postcode','Leveringsadres_Gemeente'])\r\n",
					"geo_location_dimension = grouped_reference_table_geo_location_dimension.agg(total_count=('Trekkingsdatum', 'count'))\r\n",
					"\r\n",
					"# Restiing the index\r\n",
					"geo_location_dimension = geo_location_dimension.head().reset_index()\r\n",
					"\r\n",
					"# Exclude the undefined/null value\r\n",
					"geo_location_dimension = geo_location_dimension.dropna()\r\n",
					"\r\n",
					"# Doing a join operation to get a new data frame\r\n",
					"geo_location_dimension = pd.merge(geo_location_dimension, geo_location, left_on=['Leveringsadres_Postcode'], right_on=['postcode'], how='inner')\r\n",
					"\r\n",
					"# Adding a Geo_ID based on dwh_id\r\n",
					"geo_location_dimension['Geo_ID']=geo_location_dimension['dwh_id']\r\n",
					"\r\n",
					"# Selecting specific columns\r\n",
					"geo_location_dimension = geo_location_dimension[['Geo_ID','Leveringsadres_Postcode','Leveringsadres_Gemeente','gewest','provincie']]\r\n",
					"\r\n",
					"geo_location_dimension.head()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Converting to spark dataframe\r\n",
					"geo_location_dimension_sparkdf = spark.createDataFrame(geo_location_dimension)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the geo location dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PandasDimensions/Geo_Location_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"geo_location_dimension_sparkdf\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Creating a group by for market dimensions\r\n",
					"grouped_reference_table_date_dimension = reference_table.groupby(['Trekkingsdatum'])\r\n",
					"date_dimension_1 = grouped_reference_table_date_dimension.agg(total_count=('Trekkingsdatum', 'count'))\r\n",
					"grouped_reference_table_date_dimension = reference_table.groupby(['Peildatum'])\r\n",
					"date_dimension_2 = grouped_reference_table_date_dimension.agg(total_count=('Trekkingsdatum', 'count'))\r\n",
					"date_dimension = pd.concat([date_dimension_1, date_dimension_2])\r\n",
					"\r\n",
					"# Restiing the index\r\n",
					"date_dimension = date_dimension.head().reset_index()\r\n",
					"date_dimension['Date_Standard'] = date_dimension['index']\r\n",
					"\r\n",
					"# Convert the date to single format\r\n",
					"date_dimension['Date_Standard'] = pd.to_datetime(date_dimension['Date_Standard'])\r\n",
					"date['datum'] = pd.to_datetime(date['datum'])\r\n",
					"\r\n",
					"# Exclude the undefined/null value\r\n",
					"date_dimension = date_dimension.dropna()\r\n",
					"\r\n",
					"# creating new columns\r\n",
					"date_dimension['Date'] = date_dimension['Date_Standard'].apply(lambda x: x.strftime('%Y%m%d')).astype(str)\r\n",
					"\r\n",
					"date_dimension.head()\r\n",
					"\r\n",
					"# Doing a join operation to get a new data frame\r\n",
					"date_dimension = pd.merge(date_dimension, date, left_on=['Date_Standard'], right_on=['datum'], how='inner')\r\n",
					"\r\n",
					"# Selecting specific columns\r\n",
					"date_dimension = date_dimension[['date_ID','Date','Date_Standard','dag_naam','maand_naam','jaar','kwartaal']]\r\n",
					"\r\n",
					"date_dimension.head()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Converting to spark dataframe\r\n",
					"date_dimension_sparkdf = spark.createDataFrame(date_dimension)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the date dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PandasDimensions/Date_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"date_dimension_sparkdf\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a Fact delta_table_path by joining the reference table with dimensions\r\n",
					"fact_table = pd.merge(reference_table, geo_location_dimension, left_on=['Leveringsadres_Postcode'], right_on=['Leveringsadres_Postcode'], how='inner')\r\n",
					"fact_table = pd.merge(fact_table, markt_dimension, left_on=['Markt'], right_on=['Markt'], how='inner')\r\n",
					"\r\n",
					"# converting to standard date format\r\n",
					"fact_table['Peildatum'] = pd.to_datetime(fact_table['Peildatum'])\r\n",
					"\r\n",
					"fact_table = pd.merge(fact_table, date_dimension, left_on=['Peildatum'], right_on=['Date_Standard'], how='inner')\r\n",
					"\r\n",
					"# Renaming the date column\r\n",
					"fact_table['Peildatum_ID'] = fact_table['date_ID'] \r\n",
					"\r\n",
					"# Selecting Specific columns\r\n",
					"fact_table = fact_table[['Trekkingsdatum',\r\n",
					" 'Peildatum_ID',\r\n",
					" 'Markt_ID',\r\n",
					" 'Geo_ID',\r\n",
					" 'WerkelijkVerbruik_RM_2017',\r\n",
					" 'BenaderendVerbruik_VM_2017',\r\n",
					" 'BenaderendVerbruik_VM_2017_Norm',\r\n",
					" 'AantalToegangspunten_2017',\r\n",
					" 'WerkelijkVerbruik_RM_2018',\r\n",
					" 'BenaderendVerbruik_VM_2018',\r\n",
					" 'BenaderendVerbruik_VM_2018_Norm',\r\n",
					" 'AantalToegangspunten_2018',\r\n",
					" 'WerkelijkVerbruik_RM_2019',\r\n",
					" 'BenaderendVerbruik_VM_2019',\r\n",
					" 'BenaderendVerbruik_VM_2019_Norm',\r\n",
					" 'AantalToegangspunten_2019',\r\n",
					" 'WerkelijkVerbruik_RM_2020',\r\n",
					" 'BenaderendVerbruik_VM_2020',\r\n",
					" 'BenaderendVerbruik_VM_2020_Norm',\r\n",
					" 'AantalToegangspunten_2020',\r\n",
					" 'WerkelijkVerbruik_RM_2021',\r\n",
					" 'BenaderendVerbruik_VM_2021',\r\n",
					" 'BenaderendVerbruik_VM_2021_Norm',\r\n",
					" 'AantalToegangspunten_2021',\r\n",
					" 'Gemiddeld_WerkelijkVerbruik',\r\n",
					" 'Gemiddeld_BenaderendVerbruik',\r\n",
					" 'Gemiddeld_BenaderendVerbruik_Norm',\r\n",
					" 'Total_AantalToegangspunten']]\r\n",
					"\r\n",
					"# converting to standard date format\r\n",
					"fact_table['Trekkingsdatum'] = pd.to_datetime(fact_table['Trekkingsdatum'])\r\n",
					"\r\n",
					"# Creating Trekkingsdatum_ID\r\n",
					"fact_table = pd.merge(fact_table, date_dimension, left_on=['Trekkingsdatum'], right_on=['Date_Standard'], how='inner')\r\n",
					"\r\n",
					"# Renaming the date column\r\n",
					"fact_table['Trekkingsdatum_ID'] = fact_table['date_ID'] \r\n",
					"\r\n",
					"# Selecting Specific columns\r\n",
					"fact_table = fact_table[['Trekkingsdatum_ID',\r\n",
					" 'Peildatum_ID',\r\n",
					" 'Markt_ID',\r\n",
					" 'Geo_ID',\r\n",
					" 'WerkelijkVerbruik_RM_2017',\r\n",
					" 'BenaderendVerbruik_VM_2017',\r\n",
					" 'BenaderendVerbruik_VM_2017_Norm',\r\n",
					" 'AantalToegangspunten_2017',\r\n",
					" 'WerkelijkVerbruik_RM_2018',\r\n",
					" 'BenaderendVerbruik_VM_2018',\r\n",
					" 'BenaderendVerbruik_VM_2018_Norm',\r\n",
					" 'AantalToegangspunten_2018',\r\n",
					" 'WerkelijkVerbruik_RM_2019',\r\n",
					" 'BenaderendVerbruik_VM_2019',\r\n",
					" 'BenaderendVerbruik_VM_2019_Norm',\r\n",
					" 'AantalToegangspunten_2019',\r\n",
					" 'WerkelijkVerbruik_RM_2020',\r\n",
					" 'BenaderendVerbruik_VM_2020',\r\n",
					" 'BenaderendVerbruik_VM_2020_Norm',\r\n",
					" 'AantalToegangspunten_2020',\r\n",
					" 'WerkelijkVerbruik_RM_2021',\r\n",
					" 'BenaderendVerbruik_VM_2021',\r\n",
					" 'BenaderendVerbruik_VM_2021_Norm',\r\n",
					" 'AantalToegangspunten_2021',\r\n",
					" 'Gemiddeld_WerkelijkVerbruik',\r\n",
					" 'Gemiddeld_BenaderendVerbruik',\r\n",
					" 'Gemiddeld_BenaderendVerbruik_Norm',\r\n",
					"'Total_AantalToegangspunten']]\r\n",
					"\r\n",
					"fact_table.head()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Converting to spark dataframe\r\n",
					"fact_table = spark.createDataFrame(fact_table)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the fact table to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/PySparkDimensions/Fact_Table'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"fact_table\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}