{
	"name": "SparkSQL_Fact_Dimension_Creation_Copy1",
	"properties": {
		"description": "SparkSQL_Fact_Dimension_Creation_Copy1",
		"folder": {
			"name": "Master Pipeline Notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sanzpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3001526b-27fd-45e2-aa9a-f558e12f41d8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/87083017-2c2b-47c8-8ea7-b4d36686fc97/resourceGroups/Dev_ResourceGroup/providers/Microsoft.Synapse/workspaces/cmdevsynapse/bigDataPools/sanzpool",
				"name": "sanzpool",
				"type": "Spark",
				"endpoint": "https://cmdevsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sanzpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"# Imporing the libraries\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import lit,col,sum,mean,regexp_replace,to_date,count,row_number,unix_timestamp,date_format,quarter,expr,weekofyear,concat\r\n",
					"from pyspark.sql.types import DateType,TimestampType\r\n",
					"from pyspark.sql.window import Window\r\n",
					"\r\n",
					"# Setting the flag to handle the date formats\r\n",
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
					"\r\n",
					"# Creating a spark session and connection to blob storage account\r\n",
					"blob_account_name = \"rawdevstorage\"\r\n",
					"blob_container_name = \"output\"\r\n",
					"sc = SparkSession.builder.getOrCreate()\r\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"blob_sas_token = token_library.getConnectionString(\"cmdevsynapse-WorkspaceDefaultStorage\")\r\n",
					"spark.conf.set(\r\n",
					"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
					"    blob_sas_token)\r\n",
					""
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the path to the Delta table\r\n",
					"delta_table_path = 'abfss://output@rawdevstorage.dfs.core.windows.net/Electricity_Measurement_sparksql_join'\r\n",
					"\r\n",
					"# Read Delta table into a DataFrame\r\n",
					"reference_table = spark.read.format(\"delta\").load(delta_table_path)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a temporary view: To run SQL queries on a PySpark DataFrame, you need to create a temporary view using the createOrReplaceTempView method.\r\n",
					"reference_table.createOrReplaceTempView(\"reference_table\")"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM reference_table\r\n",
					"LIMIT 5"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Reading the geo location file\r\n",
					"geo_location = spark.read.csv(\"abfss://output@rawdevstorage.dfs.core.windows.net/geo_postcode.csv\", header=True, inferSchema=True)\r\n",
					"\r\n",
					"# Create a temporary view: To run SQL queries on a PySpark DataFrame, you need to create a temporary view using the createOrReplaceTempView method.\r\n",
					"geo_location.createOrReplaceTempView(\"geo_location\")"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM geo_location\r\n",
					"LIMIT 5"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Reading the date file\r\n",
					"date = spark.read.csv(\"abfss://output@rawdevstorage.dfs.core.windows.net/time_dimension.csv\", header=True, inferSchema=True)\r\n",
					"\r\n",
					"date = date.filter(col(\"datum\") >= \"2002-01-01\")\r\n",
					"\r\n",
					"# Create a temporary view: To run SQL queries on a PySpark DataFrame, you need to create a temporary view using the createOrReplaceTempView method.\r\n",
					"date.createOrReplaceTempView(\"date\")"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM date\r\n",
					"LIMIT 5"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"with cte_group as (\r\n",
					"SELECT Markt, COUNT(1) as CT\r\n",
					"FROM reference_table\r\n",
					"WHERE Markt IS NOT NULL\r\n",
					"GROUP BY Markt\r\n",
					")\r\n",
					"SELECT ROW_NUMBER() OVER (ORDER BY Markt) AS Markt_ID\r\n",
					",Markt\r\n",
					"FROM cte_group"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"query = 'with cte_group as (\\\r\n",
					"SELECT Markt, COUNT(1) as CT\\\r\n",
					" FROM reference_table\\\r\n",
					" WHERE Markt IS NOT NULL\\\r\n",
					" GROUP BY Markt\\\r\n",
					")\\\r\n",
					"SELECT ROW_NUMBER() OVER (ORDER BY Markt) AS Markt_ID\\\r\n",
					",Markt\\\r\n",
					" FROM cte_group'\r\n",
					"\r\n",
					"markt_dimension = spark.sql(query)\r\n",
					"markt_dimension.createOrReplaceTempView(\"markt_dimension\")\r\n",
					"display(markt_dimension.limit(5))"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the markt dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/SparkSQLDimensions/Markt_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"markt_dimension\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"with cte_group as (\r\n",
					"SELECT Leveringsadres_Postcode, Leveringsadres_Gemeente, COUNT(1) as CT\r\n",
					" FROM reference_table\r\n",
					" WHERE Leveringsadres_Postcode IS NOT NULL AND Leveringsadres_Gemeente IS NOT NULL\r\n",
					" GROUP BY Leveringsadres_Postcode, Leveringsadres_Gemeente\r\n",
					")\r\n",
					"SELECT dwh_id as Geo_ID\r\n",
					",Leveringsadres_Postcode\r\n",
					",Leveringsadres_Gemeente\r\n",
					",gewest\r\n",
					",provincie\r\n",
					" FROM cte_group cg\r\n",
					" JOIN geo_location g on cg.Leveringsadres_Postcode=g.postcode\r\n",
					" LIMIT 5"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"query = 'with cte_group as (\\\r\n",
					"SELECT Leveringsadres_Postcode, Leveringsadres_Gemeente, COUNT(1) as CT\\\r\n",
					" FROM reference_table\\\r\n",
					" WHERE Leveringsadres_Postcode IS NOT NULL AND Leveringsadres_Gemeente IS NOT NULL\\\r\n",
					" GROUP BY Leveringsadres_Postcode, Leveringsadres_Gemeente\\\r\n",
					")\\\r\n",
					"SELECT dwh_id as Geo_ID\\\r\n",
					",Leveringsadres_Postcode\\\r\n",
					",Leveringsadres_Gemeente\\\r\n",
					",gewest\\\r\n",
					",provincie\\\r\n",
					" FROM cte_group cg\\\r\n",
					" JOIN geo_location g on cg.Leveringsadres_Postcode=g.postcode'\r\n",
					"\r\n",
					" \r\n",
					"geo_location_dimension = spark.sql(query)\r\n",
					"geo_location_dimension.createOrReplaceTempView(\"geo_location_dimension\")\r\n",
					"display(geo_location_dimension.limit(5))"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the geo location dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/SparkSQLDimensions/Geo_Location_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"geo_location_dimension\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"with cte_group_Trekkingsdatum as (\r\n",
					"SELECT Trekkingsdatum, COUNT(1) as CT\r\n",
					" FROM reference_table\r\n",
					" WHERE Trekkingsdatum IS NOT NULL\r\n",
					" GROUP BY Trekkingsdatum\r\n",
					"),cte_group_Peildatum as (\r\n",
					"SELECT Peildatum, COUNT(1) as CT\r\n",
					" FROM reference_table\r\n",
					" WHERE Peildatum IS NOT NULL\r\n",
					" GROUP BY Peildatum\r\n",
					"),cte_union as (\r\n",
					"SELECT * FROM cte_group_Trekkingsdatum\r\n",
					" UNION\r\n",
					" SELECT * FROM cte_group_Peildatum\r\n",
					")\r\n",
					"SELECT date_ID\r\n",
					",CONCAT(SUBSTRING(Trekkingsdatum,1,4),SUBSTRING(Trekkingsdatum,6,2),SUBSTRING(Trekkingsdatum,9,2)) as Date\r\n",
					",Trekkingsdatum as Date_Standard\r\n",
					",dag_naam\r\n",
					",maand_naam\r\n",
					",jaar\r\n",
					",kwartaal\r\n",
					" FROM cte_union cu\r\n",
					" JOIN date d on cu.Trekkingsdatum=d.datum\r\n",
					" LIMIT 5"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"query = 'with cte_group_Trekkingsdatum as (\\\r\n",
					"SELECT Trekkingsdatum, COUNT(1) as CT\\\r\n",
					" FROM reference_table\\\r\n",
					" WHERE Trekkingsdatum IS NOT NULL\\\r\n",
					" GROUP BY Trekkingsdatum\\\r\n",
					"),cte_group_Peildatum as (\\\r\n",
					"SELECT Peildatum, COUNT(1) as CT\\\r\n",
					" FROM reference_table\\\r\n",
					" WHERE Peildatum IS NOT NULL\\\r\n",
					" GROUP BY Peildatum\\\r\n",
					"),cte_union as (\\\r\n",
					"SELECT * FROM cte_group_Trekkingsdatum\\\r\n",
					" UNION\\\r\n",
					" SELECT * FROM cte_group_Peildatum\\\r\n",
					")\\\r\n",
					"SELECT date_ID\\\r\n",
					",CONCAT(SUBSTRING(Trekkingsdatum,1,4),SUBSTRING(Trekkingsdatum,6,2),SUBSTRING(Trekkingsdatum,9,2)) as Date\\\r\n",
					",Trekkingsdatum as Date_Standard\\\r\n",
					",dag_naam\\\r\n",
					",maand_naam\\\r\n",
					",jaar\\\r\n",
					",kwartaal\\\r\n",
					" FROM cte_union cu\\\r\n",
					" JOIN date d on cu.Trekkingsdatum=d.datum'\r\n",
					"\r\n",
					"date_dimension = spark.sql(query)\r\n",
					"date_dimension.createOrReplaceTempView(\"date_dimension\")\r\n",
					"display(date_dimension.limit(5))"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the date dimension to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/SparkSQLDimensions/Date_Dimension'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"date_dimension\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT tdd.date_ID as Trekkingsdatum_ID\r\n",
					",pdd.date_ID as Peildatum_ID\r\n",
					",md.Markt_ID\r\n",
					",gd.Geo_ID\r\n",
					",rt.WerkelijkVerbruik_RM_2017\r\n",
					",rt.BenaderendVerbruik_VM_2017\r\n",
					",rt.BenaderendVerbruik_VM_2017_Norm\r\n",
					",rt.AantalToegangspunten_2017\r\n",
					",rt.WerkelijkVerbruik_RM_2018\r\n",
					",rt.BenaderendVerbruik_VM_2018\r\n",
					",rt.BenaderendVerbruik_VM_2018_Norm\r\n",
					",rt.AantalToegangspunten_2018\r\n",
					",rt.WerkelijkVerbruik_RM_2019\r\n",
					",rt.BenaderendVerbruik_VM_2019\r\n",
					",rt.BenaderendVerbruik_VM_2019_Norm\r\n",
					",rt.AantalToegangspunten_2019\r\n",
					",rt.WerkelijkVerbruik_RM_2020\r\n",
					",rt.BenaderendVerbruik_VM_2020\r\n",
					",rt.BenaderendVerbruik_VM_2020_Norm\r\n",
					",rt.AantalToegangspunten_2020\r\n",
					",rt.WerkelijkVerbruik_RM_2021\r\n",
					",rt.BenaderendVerbruik_VM_2021\r\n",
					",rt.BenaderendVerbruik_VM_2021_Norm\r\n",
					",rt.AantalToegangspunten_2021\r\n",
					",rt.Gemiddeld_WerkelijkVerbruik\r\n",
					",rt.Gemiddeld_BenaderendVerbruik\r\n",
					",rt.Gemiddeld_BenaderendVerbruik_Norm\r\n",
					",rt.Total_AantalToegangspunten\r\n",
					" FROM reference_table rt\r\n",
					" JOIN markt_dimension md on rt.Markt=md.Markt\r\n",
					" JOIN geo_location_dimension gd on rt.Leveringsadres_Postcode=gd.Leveringsadres_Postcode\r\n",
					" JOIN date_dimension tdd on rt.Trekkingsdatum=tdd.Date_Standard\r\n",
					" JOIN date_dimension pdd on rt.Trekkingsdatum=pdd.Date_Standard\r\n",
					" LIMIT 5"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"query = 'SELECT DISTINCT tdd.date_ID as Trekkingsdatum_ID\\\r\n",
					",pdd.date_ID as Peildatum_ID\\\r\n",
					",md.Markt_ID\\\r\n",
					",gd.Geo_ID\\\r\n",
					",rt.WerkelijkVerbruik_RM_2017\\\r\n",
					",rt.BenaderendVerbruik_VM_2017\\\r\n",
					",rt.BenaderendVerbruik_VM_2017_Norm\\\r\n",
					",rt.AantalToegangspunten_2017\\\r\n",
					",rt.WerkelijkVerbruik_RM_2018\\\r\n",
					",rt.BenaderendVerbruik_VM_2018\\\r\n",
					",rt.BenaderendVerbruik_VM_2018_Norm\\\r\n",
					",rt.AantalToegangspunten_2018\\\r\n",
					",rt.WerkelijkVerbruik_RM_2019\\\r\n",
					",rt.BenaderendVerbruik_VM_2019\\\r\n",
					",rt.BenaderendVerbruik_VM_2019_Norm\\\r\n",
					",rt.AantalToegangspunten_2019\\\r\n",
					",rt.WerkelijkVerbruik_RM_2020\\\r\n",
					",rt.BenaderendVerbruik_VM_2020\\\r\n",
					",rt.BenaderendVerbruik_VM_2020_Norm\\\r\n",
					",rt.AantalToegangspunten_2020\\\r\n",
					",rt.WerkelijkVerbruik_RM_2021\\\r\n",
					",rt.BenaderendVerbruik_VM_2021\\\r\n",
					",rt.BenaderendVerbruik_VM_2021_Norm\\\r\n",
					",rt.AantalToegangspunten_2021\\\r\n",
					",rt.Gemiddeld_WerkelijkVerbruik\\\r\n",
					",rt.Gemiddeld_BenaderendVerbruik\\\r\n",
					",rt.Gemiddeld_BenaderendVerbruik_Norm\\\r\n",
					",rt.Total_AantalToegangspunten\\\r\n",
					" FROM reference_table rt\\\r\n",
					" JOIN markt_dimension md on rt.Markt=md.Markt\\\r\n",
					" JOIN geo_location_dimension gd on rt.Leveringsadres_Postcode=gd.Leveringsadres_Postcode\\\r\n",
					" JOIN date_dimension tdd on rt.Trekkingsdatum=tdd.Date_Standard\\\r\n",
					" JOIN date_dimension pdd on rt.Trekkingsdatum=pdd.Date_Standard'\r\n",
					"\r\n",
					"fact_table = spark.sql(query)\r\n",
					"fact_table.createOrReplaceTempView(\"fact_table\")\r\n",
					"display(fact_table.limit(5))"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the fact table to delta file\r\n",
					"file_path = 'abfss://goldlayer@rawdevstorage.dfs.core.windows.net/SparkSQLDimensions/Fact_Table'\r\n",
					"write_format=\"delta\"\r\n",
					"#partition_by=[\"DM_Peildatum\"]\r\n",
					"mode_ = \"overwrite\" #append\r\n",
					"\r\n",
					"fact_table\\\r\n",
					".write\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"overwriteSchema\", \"true\")\\\r\n",
					".format(write_format)\\\r\n",
					".mode(mode_)\\\r\n",
					".save(file_path)\r\n",
					"\r\n",
					"#.partitionBy(partition_by)\\"
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}